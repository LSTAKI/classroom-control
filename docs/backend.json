{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile in the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "name": {
          "type": "string",
          "description": "The user's full name."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "role": {
          "type": "string",
          "description": "The user's role (e.g., teacher, student, parent, admin)."
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "role"
      ]
    },
    "Class": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Class",
      "type": "object",
      "description": "Represents a class and its associated analytics.",
      "properties": {
        "classId": {
          "type": "string",
          "description": "Unique identifier for the Class entity."
        },
        "teacherId": {
          "type": "string",
          "description": "Reference to Teacher. (Relationship: Teacher 1:N Class)"
        },
        "studentIds": {
          "type": "array",
          "description": "References to Students. (Relationship: Class 1:N Student)",
          "items": {
            "type": "string"
          }
        },
        "avgAttendance": {
          "type": "number",
          "description": "The average attendance for the class."
        },
        "avgMarks": {
          "type": "number",
          "description": "The average marks for the class."
        },
        "homeworkCompletionRate": {
          "type": "number",
          "description": "The homework completion rate for the class."
        }
      },
      "required": [
        "classId",
        "teacherId",
        "studentIds",
        "avgAttendance",
        "avgMarks",
        "homeworkCompletionRate"
      ]
    },
    "Student": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Student",
      "type": "object",
      "description": "Represents a student and their performance data.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Student entity."
        },
        "performance": {
          "type": "number",
          "description": "The student's overall performance score."
        },
        "attendanceTrend": {
          "type": "string",
          "description": "The student's attendance trend (e.g., improving, declining)."
        },
        "homeworkSubmissions": {
          "type": "number",
          "description": "The number of homework submissions by the student."
        },
        "classId": {
          "type": "string",
          "description": "Reference to Class. (Relationship: Class 1:N Student)"
        }
      },
      "required": [
        "id",
        "performance",
        "attendanceTrend",
        "homeworkSubmissions",
        "classId"
      ]
    },
    "Complaint": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Complaint",
      "type": "object",
      "description": "Represents a complaint filed by a teacher.",
      "properties": {
        "complaintId": {
          "type": "string",
          "description": "Unique identifier for the Complaint entity."
        },
        "studentId": {
          "type": "string",
          "description": "Reference to Student. (Relationship: Student 1:N Complaint)"
        },
        "teacherId": {
          "type": "string",
          "description": "Reference to Teacher. (Relationship: Teacher 1:N Complaint)"
        },
        "reason": {
          "type": "string",
          "description": "The reason for the complaint."
        },
        "date": {
          "type": "string",
          "description": "The date the complaint was filed.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "The status of the complaint (e.g., filed, withdrawn)."
        }
      },
      "required": [
        "complaintId",
        "studentId",
        "teacherId",
        "reason",
        "date",
        "status"
      ]
    },
    "Homework": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Homework",
      "type": "object",
      "description": "Represents a homework assignment.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Homework entity."
        },
        "title": {
          "type": "string",
          "description": "The title of the homework assignment."
        },
        "description": {
          "type": "string",
          "description": "A description of the homework assignment."
        },
        "dueDate": {
          "type": "string",
          "description": "The due date for the homework assignment.",
          "format": "date-time"
        },
        "attachments": {
          "type": "string",
          "description": "Reference to attachments stored in storage.  It could contain a URL for accessing the attachements."
        },
        "assignedBy": {
          "type": "string",
          "description": "Reference to Teacher. (Relationship: Teacher 1:N Homework)"
        },
        "assignedTo": {
          "type": "string",
          "description": "Reference to Student. (Relationship: Student 1:N Homework)"
        },
        "status": {
          "type": "string",
          "description": "The status of the homework assignment (e.g., checked, pending)."
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "dueDate",
        "attachments",
        "assignedBy",
        "assignedTo",
        "status"
      ]
    },
    "Ranking": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Ranking",
      "type": "object",
      "description": "Represents a student's ranking.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Ranking entity."
        },
        "studentId": {
          "type": "string",
          "description": "Reference to Student. (Relationship: Student 1:1 Ranking)"
        },
        "homeworkCompletion": {
          "type": "number",
          "description": "The student's homework completion rate."
        },
        "complaints": {
          "type": "number",
          "description": "The number of complaints against the student."
        },
        "activityScore": {
          "type": "number",
          "description": "The student's activity score."
        },
        "rank": {
          "type": "number",
          "description": "The student's overall rank."
        }
      },
      "required": [
        "id",
        "studentId",
        "homeworkCompletion",
        "complaints",
        "activityScore",
        "rank"
      ]
    },
    "CalendarEvent": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CalendarEvent",
      "type": "object",
      "description": "Represents an event on the calendar.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the CalendarEvent entity."
        },
        "type": {
          "type": "string",
          "description": "The type of event (e.g., homework, event, holiday)."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "date": {
          "type": "string",
          "description": "The date of the event.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "A description of the event."
        },
        "classId": {
          "type": "string",
          "description": "Reference to Class. (Relationship: Class 1:N CalendarEvent)"
        }
      },
      "required": [
        "id",
        "type",
        "title",
        "date",
        "description",
        "classId"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information.  'userId' is the Firebase Auth UID.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/homework/{homeworkId}",
        "definition": {
          "entityName": "Homework",
          "schema": {
            "$ref": "#/backend/entities/Homework"
          },
          "description": "Stores homework assignments for a specific user. 'userId' is the ID of the assigned student, and 'homeworkId' is the unique homework ID.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the student to whom the homework is assigned."
            },
            {
              "name": "homeworkId",
              "description": "The unique identifier for the homework assignment."
            }
          ]
        }
      },
      {
        "path": "/classes/{classId}",
        "definition": {
          "entityName": "Class",
          "schema": {
            "$ref": "#/backend/entities/Class"
          },
          "description": "Stores class information, including teacherId and studentIds. The teacherId field is denormalized for authorization independence.",
          "params": [
            {
              "name": "classId",
              "description": "The unique identifier for the class."
            }
          ]
        }
      },
      {
        "path": "/students/{studentId}",
        "definition": {
          "entityName": "Student",
          "schema": {
            "$ref": "#/backend/entities/Student"
          },
          "description": "Stores student performance data.  Accessible to teachers and admins.",
          "params": [
            {
              "name": "studentId",
              "description": "The unique identifier for the student."
            }
          ]
        }
      },
      {
        "path": "/complaints/{complaintId}",
        "definition": {
          "entityName": "Complaint",
          "schema": {
            "$ref": "#/backend/entities/Complaint"
          },
          "description": "Stores complaints filed by teachers. Accessible to teachers, students (related to the complaint), and admins.",
          "params": [
            {
              "name": "complaintId",
              "description": "The unique identifier for the complaint."
            }
          ]
        }
      },
      {
        "path": "/rankings/{rankingId}",
        "definition": {
          "entityName": "Ranking",
          "schema": {
            "$ref": "#/backend/entities/Ranking"
          },
          "description": "Stores student rankings.  Accessible to teachers and admins.",
          "params": [
            {
              "name": "rankingId",
              "description": "The unique identifier for the ranking."
            }
          ]
        }
      },
      {
        "path": "/calendar/{calendarEventId}",
        "definition": {
          "entityName": "CalendarEvent",
          "schema": {
            "$ref": "#/backend/entities/CalendarEvent"
          },
          "description": "Stores calendar events. Accessible to teachers, students, and parents associated with the classId.",
          "params": [
            {
              "name": "calendarEventId",
              "description": "The unique identifier for the calendar event."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Documents in this collection grant admin privileges to the user.  Existence of document confers role.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to facilitate a secure and scalable Teacher Dashboard application, adhering to the principles of Authorization Independence, Clarity of Intent, and DBAC. It supports the required QAPs through structural segregation and membership models. The structure prioritizes path-based ownership for user-specific data and denormalization for authorization independence.\n\n**Authorization Independence:** The design denormalizes authorization data to avoid `get()` calls in security rules, enabling atomic operations. For collaborative data like classes, the `teacherId` is explicitly stored, allowing direct authorization checks without needing to traverse parent documents.\n\n**Structural Segregation:** The structure segregates data based on access requirements. User profiles are stored separately from student data, homework, and complaints. This segregation simplifies security rules and ensures that only authorized users can access specific data.\n\n**Access Modeling:** Path-based ownership is used for entities like homework assignments, where the path `/users/{userId}/homework/{homeworkId}` clearly establishes ownership. Collaborative data, such as classes, uses the `teacherId` field for authorization.  Global roles are managed through the `/roles_admin/{uid}` collection, enabling efficient role-based access control.\n\n**QAPs (Rules are not Filters):** The structure supports secure `list` operations by ensuring that each collection contains documents with homogeneous security postures.  For example, listing homework is possible under the user's path because all homework documents under `/users/{userId}/homework` are owned by that user.\n\n**Invariants:** The structure supports data integrity by enforcing ownership through path-based structures and denormalized authorization fields. Timestamps can be added to documents to track creation and modification times. Denormalized data, such as teacherId in classes, ensures data consistency across the application."
  }
}