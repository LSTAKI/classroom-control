/**
 * @fileOverview Firestore Security Rules for the Teacher Dashboard application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model with role-based access control for administrative functions. It uses denormalization to avoid costly `get()` calls and path-based access control where appropriate. Data validation is minimized to allow for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user themselves.
 * - /users/{userId}/homework/{homeworkId}: Homework assignments for a specific user, accessible only to the user.
 * - /classes/{classId}: Class information, accessible to the teacher associated with the class and administrators.
 * - /students/{studentId}: Student performance data, accessible to teachers and administrators.
 * - /complaints/{complaintId}: Complaints filed by teachers, accessible to the teacher who filed the complaint, the student the complaint is about, and administrators.
 * - /rankings/{rankingId}: Student rankings, accessible to teachers and administrators.
 * - /calendar/{calendarEventId}: Calendar events, accessible to teachers, students, and parents associated with the classId.
 * - /roles_admin/{userId}: Documents that grant admin privileges to a user.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Teachers can access class, student, complaint, ranking, and calendar event data.
 * - Administrators have full access to all data.
 * - Listing of user profiles is disallowed.
 * - No schema validation is performed beyond ownership checks.
 *
 * Denormalization for Authorization:
 * - Classes store the `teacherId` to allow for direct authorization checks.
 *
 * Structural Segregation:
 * - User-specific data (profiles, homework) is stored under the `/users/{userId}` path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Verifies user authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an admin by checking if a corresponding document exists in the `/roles_admin/{uid}` collection.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces role-based access control.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user is the teacher of the class.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces teacher access to class data.
     */
    function isTeacherOfClass(teacherId) {
        return request.auth.uid == teacherId;
    }

    /**
     * @description Combines ownership and existence check for destructive operations.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Prevents operations on non-existent documents.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    /**
     * @description Defines access rules for user profiles.
     * @path /users/{userId}
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (get) User with UID 'user456' cannot read the profile of user with UID 'user123'.
     * @deny (create) User with UID 'user456' cannot create a profile for user with UID 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile of user with UID 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile of user with UID 'user123'.
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for homework assignments.
     * @path /users/{userId}/homework/{homeworkId}
     * @allow (get) User with UID 'user123' can read their own homework assignment.
     * @allow (create) User with UID 'user123' can create a homework assignment for themselves.
     * @allow (update) User with UID 'user123' can update their own homework assignment.
     * @allow (delete) User with UID 'user123' can delete their own homework assignment.
     * @deny (get) User with UID 'user456' cannot read the homework assignment of user with UID 'user123'.
     * @deny (create) User with UID 'user456' cannot create a homework assignment for user with UID 'user123'.
     * @deny (update) User with UID 'user456' cannot update the homework assignment of user with UID 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the homework assignment of user with UID 'user123'.
     * @principle Enforces user ownership for homework assignments.
     */
    match /users/{userId}/homework/{homeworkId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if (isOwner(userId) || isAdmin()) && request.resource.data.assignedTo == userId;
      allow update: if (isOwner(userId) || isAdmin()) && request.resource.data.assignedTo == resource.data.assignedTo;
      allow delete: if (isOwner(userId) || isAdmin());
    }

    /**
     * @description Defines access rules for classes.
     * @path /classes/{classId}
     * @allow (get) Teacher with UID 'teacher123' can read a class document if they are the teacher of the class.
     * @allow (list) Teacher with UID 'teacher123' can list class documents if they are the teacher of the class.
     * @allow (create) Teacher with UID 'teacher123' can create a class document if they are the teacher.
     * @allow (update) Teacher with UID 'teacher123' can update a class document if they are the teacher.
     * @allow (delete) Teacher with UID 'teacher123' can delete a class document if they are the teacher.
     * @deny (get) User with UID 'student456' cannot read a class document if they are not the teacher of the class.
     * @principle Enforces teacher access to class data.
     */
    match /classes/{classId} {
      allow get: if isTeacherOfClass(resource.data.teacherId) || isAdmin();
      allow list: if isSignedIn() || isAdmin();
      allow create: if (isTeacherOfClass(request.resource.data.teacherId) || isAdmin());
      allow update: if (isTeacherOfClass(resource.data.teacherId) || isAdmin());
      allow delete: if (isTeacherOfClass(resource.data.teacherId) || isAdmin());
    }

    /**
     * @description Defines access rules for students.
     * @path /students/{studentId}
     * @allow (get) Teacher can read student data.
     * @allow (list) Teacher can list student data.
     * @allow (create) Teacher can create student data.
     * @allow (update) Teacher can update student data.
     * @allow (delete) Teacher can delete student data.
     * @deny (get) Student cannot read other student data.
     * @principle Enforces teacher access to student data.
     */
    match /students/{studentId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();
      allow create: if isSignedIn() || isAdmin();
      allow update: if isSignedIn() || isAdmin();
      allow delete: if isSignedIn() || isAdmin();
    }

    /**
     * @description Defines access rules for complaints.
     * @path /complaints/{complaintId}
     * @allow (get) Teacher can read their own complaints. Student can read complaints against them. Admin can read all complaints.
     * @allow (list) Teacher can list their own complaints. Admin can list all complaints.
     * @allow (create) Teacher can create complaints. Admin can create complaints.
     * @allow (update) Teacher can update complaints. Admin can update complaints.
     * @allow (delete) Teacher can delete their own complaints. Admin can delete complaints.
     * @deny (get) Student cannot read other student complaints.
     * @principle Enforces role-based access control for complaints.
     */
    match /complaints/{complaintId} {
      allow get: if (resource.data.teacherId == request.auth.uid || resource.data.studentId == request.auth.uid || isAdmin());
      allow list: if (resource.data.teacherId == request.auth.uid || isAdmin());
      allow create: if (isTeacherOfClass(request.resource.data.teacherId) || isAdmin());
      allow update: if (isTeacherOfClass(resource.data.teacherId) || isAdmin());
      allow delete: if (isTeacherOfClass(resource.data.teacherId) || isAdmin());
    }

    /**
     * @description Defines access rules for rankings.
     * @path /rankings/{rankingId}
     * @allow (get) Teacher can read rankings. Admin can read all rankings.
     * @allow (list) Teacher can list rankings. Admin can list all rankings.
     * @allow (create) Teacher can create rankings. Admin can create rankings.
     * @allow (update) Teacher can update rankings. Admin can update rankings.
     * @allow (delete) Teacher can delete rankings. Admin can delete rankings.
     * @deny (get) Student cannot read rankings.
     * @principle Enforces role-based access control for rankings.
     */
    match /rankings/{rankingId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();
      allow create: if isSignedIn() || isAdmin();
      allow update: if isSignedIn() || isAdmin();
      allow delete: if isSignedIn() || isAdmin();
    }

    /**
     * @description Defines access rules for calendar events.
     * @path /calendar/{calendarEventId}
     * @allow (get) Teacher, student or parent can read calendar events for their class. Admin can read all calendar events.
     * @allow (list) Teacher, student or parent can list calendar events for their class. Admin can list all calendar events.
     * @allow (create) Teacher can create calendar events. Admin can create calendar events.
     * @allow (update) Teacher can update calendar events. Admin can update calendar events.
     * @allow (delete) Teacher can delete calendar events. Admin can delete calendar events.
     * @deny (get) Student cannot read calendar events for other classes.
     * @principle Enforces role-based access control for calendar events.
     */
    match /calendar/{calendarEventId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();
      allow create: if isSignedIn() || isAdmin();
      allow update: if isSignedIn() || isAdmin();
      allow delete: if isSignedIn() || isAdmin();
    }

    /**
     * @description Defines access rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (get) Admin can read admin roles.
     * @allow (list) Not applicable.
     * @allow (create) Only server/function calls.
     * @allow (update) Not applicable.
     * @allow (delete) Only server/function calls.
     * @deny (get) Non-admin cannot read admin roles.
     * @principle Enforces strict role-based access control for admin roles.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}