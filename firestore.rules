/**
 * @fileoverview Firestore Security Rules for the Teacher Dashboard application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-based access model for user data, supplemented by role-based access for administrative functions.
 * It leverages denormalization to avoid costly `get()` calls within the security rules.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores profile data, owned by the user with the matching UID.
 * - `/users/{userId}/homework/{homeworkId}`: Homework assignments for a specific user.
 * - `/classes/{classId}`: Class data, with the teacher's UID stored in the `teacherId` field.
 * - `/students/{studentId}`: Student data, accessible to teachers and admins.
 * - `/complaints/{complaintId}`: Complaints, accessible to relevant teachers, students, and admins.
 * - `/rankings/{rankingId}`: Student rankings, accessible to teachers and admins.
 * - `/calendar/{calendarEventId}`: Calendar events, accessible to teachers, students, and parents associated with the class.
 * - `/roles_admin/{userId}`: Presence of a document grants admin privileges.
 *
 * Key Security Decisions:
 * - Strict user-ownership for profile data and homework assignments.
 * - Teacher access to class, student, ranking, and complaint data.
 * - Administrative role for elevated privileges.
 * - Listing homework is allowed only within a user's own `homework` subcollection.
 * - Public listing of top-level collections like `/homeworks` is disallowed.
 *
 * Denormalization for Authorization:
 * - The `classes` documents store the `teacherId` to allow direct checks without additional reads.
 *
 * Structural Segregation:
 * - User-specific data is stored under `/users/{userId}` to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data based on ownership.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile with id 'user123'.
     * @allow (get, update, delete) User with UID 'user123' can read/write their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile with id 'user123'.
     * @deny (get, update, delete) User with UID 'user456' cannot read/write user 'user123' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to homework assignments based on user ownership.
     * @path /users/{userId}/homework/{homeworkId}
     * @allow (create) User with UID 'student123' can create a homework assignment under their profile.
     * @allow (get, update, delete) User with UID 'student123' can read/write their own homework.
     * @deny (create) User with UID 'student456' cannot create homework under 'student123' profile.
     * @deny (get, update, delete) User with UID 'student456' cannot read/write homework under 'student123' profile.
     * @principle Enforces document ownership for writes within a user-specific subcollection.
     */
    match /users/{userId}/homework/{homeworkId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to class data to teachers.
     * @path /classes/{classId}
     * @allow (get, list) Any signed-in user can read the class details.
     * @allow (create) Teachers can create a class with their teacherId.
     * @allow (update, delete) Only the teacher associated with the class can modify it.
     * @deny (create) User with UID 'student123' cannot create a class with teacherId 'teacher456'.
     * @deny (update, delete) User with UID 'student123' cannot modify class owned by teacher 'teacher456'.
     * @principle Enforces teacher ownership for class management.
     */
    match /classes/{classId} {
      function isTeacher(classId) {
        return request.auth.uid == resource.data.teacherId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.teacherId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.teacherId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.teacherId;
    }

    /**
     * @description Grants access to student data to teachers and admins.
     * @path /students/{studentId}
     * @allow (get, list) Any signed-in user can read the student details.
     * @allow (create, update, delete) Only admins can manage student data.
     * @deny (create, update, delete) User with UID 'teacher123' cannot create/modify student data without admin role.
     * @principle Restricts student data management to admins.
     */
    match /students/{studentId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to complaint data to relevant teachers, students, and admins.
     * @path /complaints/{complaintId}
     * @allow (get, list) Any signed-in user can read the complaint details.
     * @allow (create) Only teachers can file complaints.
     * @allow (update, delete) Only admins can manage complaints.
     * @deny (create) User with UID 'student123' cannot create a complaint.
     * @deny (update, delete) User with UID 'teacher123' cannot modify complaints without admin role.
     * @principle Restricts complaint filing to teachers and management to admins.
     */
    match /complaints/{complaintId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isTeacher(complaintId) {
        return request.auth.uid == resource.data.teacherId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to ranking data to teachers and admins.
     * @path /rankings/{rankingId}
     * @allow (get, list) Any signed-in user can read the ranking details.
     * @allow (create, update, delete) Only admins can manage student rankings.
     * @deny (create, update, delete) User with UID 'teacher123' cannot create/modify rankings without admin role.
     * @principle Restricts ranking data management to admins.
     */
    match /rankings/{rankingId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Grants access to calendar events to teachers, students, and parents associated with the class.
     * @path /calendar/{calendarEventId}
     * @allow (get, list) Any signed-in user can read the calendar event details.
     * @allow (create, update, delete) Any signed-in user can create/modify/delete calendar events.
     * @principle Allows management of calendar events by associated users.
     */
    match /calendar/{calendarEventId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Grants admin privileges based on document existence in this collection.
     * @path /roles_admin/{userId}
     * @allow (get) Anyone can check if a user is an admin (for UI purposes).
     * @allow (create) Only the user themselves can become an admin (for initial setup).
     * @allow (delete) Only admins can revoke admin privileges.
     * @deny (create) User with UID 'user456' cannot grant admin role to 'user123'.
     *  @principle Confers admin role based on document existence.
     */
    match /roles_admin/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if false;
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description  Prevents unauthorized listing of the /homeworks collection.
     * @path /homeworks
     * @deny (list) Prevents anyone from listing all homeworks.
     * @principle Restricts general listing of homeworks.
     */
    match /homeworks {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}