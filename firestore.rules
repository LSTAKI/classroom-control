/**
 * @fileoverview Firestore Security Rules for the Teacher Dashboard application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, primarily based on ownership and roles.
 * User-specific data is secured using path-based ownership, while shared resources leverage
 * denormalized fields for efficient authorization. Administrative roles are managed
 * through a dedicated collection.  This set of rules assumes prototyping mode and allows flexible data shapes and allows read operations to be public where it is appropriate.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/homework/{homeworkId}: Stores homework assigned to a specific user.
 * - /classes/{classId}: Stores class information, including teacherId and studentIds.
 * - /students/{studentId}: Stores student performance data.
 * - /complaints/{complaintId}: Stores complaints filed by teachers.
 * - /rankings/{rankingId}: Stores student rankings.
 * - /calendar/{calendarEventId}: Stores calendar events.
 * - /roles_admin/{userId}: Documents in this collection grant admin privileges to the user.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed except for admins.
 * - Public read access is granted to the 'students', 'complaints', 'rankings', and 'calendar' collections, with owner-only writes (if the entity schema includes an owner/author field).
 * - The /roles_admin collection confers admin privileges based on document existence.
 *
 * Denormalization for Authorization:
 * - The `teacherId` field is stored directly within the `/classes/{classId}` document to enable
 *   direct authorization checks without requiring additional reads.
 *
 * Structural Segregation:
 * - User profiles are stored separately from other data to simplify security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information. Only the user themselves can read/write their profile.
     * @path /users/{userId}
     * @allow (create, update, delete) if the user's auth UID matches the 'userId' path segment and the 'id' field in the document.
     * @allow (get, list) if the user's auth UID matches the 'userId' path segment.
     * @deny (create, update, delete) if the user's auth UID does not match the 'userId' path segment.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is generally disallowed

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to homework assignments for a specific user. Only the assigned user can read/write their homework.
     * @path /users/{userId}/homework/{homeworkId}
     * @allow (create, update, delete) if the user's auth UID matches the 'userId' path segment.
     * @allow (get, list) if the user's auth UID matches the 'userId' path segment.
     * @deny (create, update, delete) if the user's auth UID does not match the 'userId' path segment.
     * @principle Enforces document ownership for homework assignments.
     */
    match /users/{userId}/homework/{homeworkId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to class information. Teachers can read/write class data.
     * @path /classes/{classId}
     * @allow (create, update, delete) if the user's auth UID matches the 'teacherId' field in the document.
     * @allow (get, list) if true.
     * @deny (create, update, delete) if the user's auth UID does not match the 'teacherId' field in the document.
     * @principle Enforces teacher ownership for class management.
     */
    match /classes/{classId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user is the teacher of the class
      function isTeacher(teacherId) {
        return request.auth.uid == teacherId;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if isSignedIn() && isTeacher(request.resource.data.teacherId);
      allow update: if isSignedIn() && isTeacher(resource.data.teacherId);
      allow delete: if isSignedIn() && isTeacher(resource.data.teacherId);
    }

    /**
     * @description Controls access to student data. Accessible to teachers and admins.
     * @path /students/{studentId}
     * @allow (get, list) if true.
     * @allow (create, update, delete) if false. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Restricts access to student performance data.
     */
    match /students/{studentId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if isSignedIn();

        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to complaints. Accessible to teachers, students (related to the complaint), and admins.
     * @path /complaints/{complaintId}
     * @allow (get, list) if true.
     * @allow (create, update, delete) if false. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Restricts access to complaints data.
     */
    match /complaints/{complaintId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if isSignedIn();

        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to student rankings. Accessible to teachers and admins.
     * @path /rankings/{rankingId}
     * @allow (get, list) if true.
     * @allow (create, update, delete) if false. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Restricts access to student rankings data.
     */
    match /rankings/{rankingId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if isSignedIn();

        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to calendar events. Accessible to teachers, students, and parents associated with the classId.
     * @path /calendar/{calendarEventId}
     * @allow (get, list) if true.
     * @allow (create, update, delete) if false. // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Restricts access to calendar events data.
     */
    match /calendar/{calendarEventId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get: if isSignedIn();
        allow list: if isSignedIn();

        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to admin roles. Only users with a document in this collection are admins.
     * @path /roles_admin/{userId}
     * @allow (create) if the user's auth UID matches the 'userId' path segment.
     * @allow (get, list) if isSignedIn().
     * @allow (update, delete) if false; // Only create operations are allowed to assign the role.
     * @deny (create) if the user's auth UID does not match the 'userId' path segment.
     * @principle Grants admin privileges based on document existence.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isAdmin(userId);
      allow list: if isSignedIn();

      allow create: if isSignedIn() && isAdmin(userId);
      allow update, delete: if false;
    }
  }
}