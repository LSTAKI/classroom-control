/**
 * @fileoverview Firestore Security Rules for the Teacher Dashboard application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, owner-based access model for user data
 * and leverages denormalization to optimize authorization checks. It uses path-based
 * authorization and explicit role management for admin privileges.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, owned by the user.
 * - /users/{userId}/homework/{homeworkId}: Homework assignments for a specific user, owned by the user.
 * - /classes/{classId}: Class information, where the teacherId field is used for authorization.
 * - /students/{studentId}: Student performance data, accessible to teachers and admins.
 * - /complaints/{complaintId}: Complaints filed by teachers, accessible to teachers, students (related to the complaint), and admins.
 * - /rankings/{rankingId}: Student rankings, accessible to teachers and admins.
 * - /calendar/{calendarEventId}: Calendar events, accessible to teachers, students, and parents associated with the classId.
 * - /roles_admin/{userId}: Documents granting admin privileges to the user.
 *
 * Key Security Decisions:
 * - Strict user-ownership for data under /users/{userId}.
 * - Teacher access to class-related data (classes, students, calendar events).
 * - Admin role managed through the /roles_admin/{userId} collection.
 * - Denormalization of teacherId in classes for authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) Only the user with matching UID can access/modify their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own profile.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Allow read, update, and delete only if the user is the owner.
      allow get: if true;
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to homework assignments for a specific user.
     * @path /users/{userId}/homework/{homeworkId}
     * @allow (create) User with matching UID can create homework for themselves.
     * @allow (get, update, delete) Only the user with matching UID can access/modify their own homework.
     * @deny (create) User cannot create homework for another user.
     * @deny (list) Only the owner can list their homework.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/homework/{homeworkId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create homework for themselves.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.assignedTo == userId;

      // Allow read, update, and delete only if the user is the owner.
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.assignedTo == resource.data.assignedTo;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to class information.
     * @path /classes/{classId}
     * @allow (get, list) Public read access to class information.
     * @allow (create) Only teachers can create a class. The 'teacherId' must match the authenticated user's UID.
     * @allow (update, delete) Only the teacher who created the class can modify or delete it.
     * @deny (create, update, delete) Non-teachers cannot create, modify, or delete classes.
     * @principle Enforces teacher-ownership for class management.
     */
    match /classes/{classId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTeacher(teacherId) {
        return request.auth.uid == teacherId;
      }

      function isExistingTeacher(teacherId) {
        return isTeacher(teacherId) && resource != null;
      }

      // Allow public read access to class information.
      allow get, list: if true;

      // Allow teachers to create a class.
      allow create: if isSignedIn() && isTeacher(request.resource.data.teacherId);

      // Allow the teacher who created the class to modify or delete it.
      allow update: if isExistingTeacher(resource.data.teacherId) && request.resource.data.teacherId == resource.data.teacherId;
      allow delete: if isExistingTeacher(resource.data.teacherId);
    }

    /**
     * @description Allows access to student performance data.
     * @path /students/{studentId}
     * @allow (get, list) Public read access to student data.
     * @allow (create, update, delete) Only admins can create, modify, or delete student data.
     * @deny (create, update, delete) Non-admins cannot create, modify, or delete student data.
     * @principle Restricts access to student data to admins.
     */
    match /students/{studentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Allow public read access to student data.
      allow get, list: if true;

      // Allow only admins to create, update, or delete student data.
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows access to complaints filed by teachers.
     * @path /complaints/{complaintId}
     * @allow (get, list) Public read access to complaints.
     * @allow (create) Only teachers can file a complaint. The 'teacherId' must match the authenticated user's UID.
     * @allow (update, delete) Only admins can modify or delete complaints.
     * @deny (create) Non-teachers cannot file complaints.
     * @deny (update, delete) Non-admins cannot modify or delete complaints.
     * @principle Enforces teacher-only complaint filing and admin-only management.
     */
    match /complaints/{complaintId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTeacher(teacherId) {
        return request.auth.uid == teacherId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Allow public read access to complaints.
      allow get, list: if true;

      // Allow teachers to file a complaint.
      allow create: if isSignedIn() && isTeacher(request.resource.data.teacherId);

      // Allow only admins to update or delete complaints.
      allow update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows access to student rankings.
     * @path /rankings/{rankingId}
     * @allow (get, list) Public read access to rankings.
     * @allow (create, update, delete) Only admins can create, modify, or delete student rankings.
     * @deny (create, update, delete) Non-admins cannot create, modify, or delete rankings.
     * @principle Restricts access to student rankings to admins.
     */
    match /rankings/{rankingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Allow public read access to rankings.
      allow get, list: if true;

      // Allow only admins to create, update, or delete student rankings.
      allow create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows access to calendar events.
     * @path /calendar/{calendarEventId}
     * @allow (get, list) Public read access to calendar events.
     * @allow (create, update, delete) Only teachers can create, modify, or delete calendar events. The 'classId' must be associated with the teacher.
     * @deny (create, update, delete) Non-teachers cannot create, modify, or delete calendar events.
     * @principle Enforces teacher-ownership for calendar event management.
     */
    match /calendar/{calendarEventId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTeacherOfClass(classId) {
        return get(/databases/$(database)/documents/classes/$(classId)).data.teacherId == request.auth.uid;
      }

      function isExistingTeacherOfClass(classId) {
          return isTeacherOfClass(classId) && resource != null;
      }

      // Allow public read access to calendar events.
      allow get, list: if true;

      // Allow teachers to create calendar events for their classes.
      allow create: if isSignedIn() && isTeacherOfClass(request.resource.data.classId);

      // Allow teachers to update and delete calendar events for their classes.
      allow update: if isExistingTeacherOfClass(resource.data.classId) && request.resource.data.classId == resource.data.classId;
      allow delete: if isExistingTeacherOfClass(resource.data.classId);
    }

    /**
     * @description Grants admin privileges to a user.
     * @path /roles_admin/{userId}
     * @allow (create) Only the user with matching UID can create their admin role.
     * @allow (get, update, delete) Only the user with matching UID can access/modify their admin role.
     * @deny (create) User cannot create an admin role for another user.
     * @deny (list) Listing all admin roles is not allowed.
     * @principle Enforces document ownership for admin role management.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create their own admin role.
      allow create: if isSignedIn() && isOwner(userId);

      // Allow read, update, and delete only if the user is the owner.
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Prevents listing the entire homeworks collection.
     * @path /homeworks
     * @deny (list) Listing all homeworks is not allowed, because homework is stored under user paths.
     * @principle Homework must be accessed through user-specific paths to enforce ownership.
     */
    match /homeworks {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}