/**
 * @fileOverview
 * This ruleset enforces a role-based and ownership-based access control model for the Teacher Dashboard application.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user themselves.
 * - /classes/{classId}: Class data, manageable by the teacher who created the class.
 * - /students/{studentId}: Student data, accessible by teachers.
 * - /complaints/{complaintId}: Complaints, accessible to teacher, student and admin.
 * - /homeworks/{homeworkId}: Homework assignments, accessible by the assigned teacher and student.
 * - /rankings/{rankingId}: Student rankings, dynamically updated.
 * - /calendar_events/{calendarEventId}: Calendar events, accessible by class members.
 * - /roles_admin/{userId}: Indicates admin roles.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Data validation is minimal, focusing on authorization and relational integrity.
 * - Read-only collections are not explicitly defined in this model.
 * - Ambiguous relationships default to strict owner-only access.
 *
 * Denormalization for Authorization:
 * - Class documents include the teacherId for easy owner checks.
 * - Complaint documents include the studentId and teacherId.
 *
 * Structural Segregation:
 * - User profiles are stored separately from class data to maintain distinct security requirements.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (read, write): Authenticated user with matching userId can access their own profile.
     * @deny (read, write): Authenticated user cannot access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to class data.
     * @path /classes/{classId}
     * @allow (create): Authenticated user can create a class if they are the teacher.
     * @allow (read, write): Teacher can manage class.
     * @deny (read, write): Students cannot manage classes directly.
     * @principle Enforces teacher ownership for class management.
     */
    match /classes/{classId} {
      allow get, list: if isSignedIn();
      allow create: if request.auth.uid == request.resource.data.teacherId;
      allow update: if resource.data.teacherId == request.auth.uid && resource != null;
      allow delete: if resource.data.teacherId == request.auth.uid && resource != null;
    }

    /**
     * @description Controls access to student data.
     * @path /students/{studentId}
     * @allow (read): Any authenticated user can read student data.
     * @deny (write): Only teachers can create or modify student data.
     * @principle Restricts student data modification to teachers.
     */
    match /students/{studentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to complaint data.
     * @path /complaints/{complaintId}
     * @allow (read): Any authenticated user can read complaint data.
     * @allow (create): Teacher can create complaints.
     * @allow (update): Only the original teacher can update a complaint.
     * @deny (delete): Complaints can only be deleted by an admin.
     * @principle Allows complaint visibility but restricts modifications.
     */
    match /complaints/{complaintId} {
      allow get, list: if isSignedIn();
      allow create: if request.auth.uid == request.resource.data.teacherId;
      allow update: if resource.data.teacherId == request.auth.uid && resource != null;
      allow delete: if false;
    }

    /**
     * @description Controls access to homework data.
     * @path /homeworks/{homeworkId}
     * @allow (read): Any authenticated user can read homework data.
     * @allow (create): Teacher can assign homework.
     * @allow (update): Only the assigning teacher can update homework.
     * @deny (delete): Homework can only be deleted by an admin.
     * @principle Restricts homework management to the assigning teacher.
     */
    match /homeworks/{homeworkId} {
      allow get, list: if isSignedIn();
      allow create: if request.auth.uid == request.resource.data.assignedBy;
      allow update: if resource.data.assignedBy == request.auth.uid && resource != null;
      allow delete: if false;
    }

    /**
     * @description Controls access to ranking data.
     * @path /rankings/{rankingId}
     * @allow (read): Any authenticated user can read ranking data.
     * @deny (write): Ranking data can only be updated by server-side functions.
     * @principle Prevents client-side modifications to ranking data.
     */
    match /rankings/{rankingId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to calendar event data.
     * @path /calendar_events/{calendarEventId}
     * @allow (read): Any authenticated user can read calendar event data.
     * @allow (create): Teacher can create calendar events.
     * @allow (update): Only the creating teacher can update a calendar event.
     * @deny (delete): Calendar events can only be deleted by an admin.
     * @principle Restricts event management to the creating teacher.
     */
    match /calendar_events/{calendarEventId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn(); // TODO: Consider restricting this to teachers only based on classId
      allow update: if isSignedIn() && resource != null;  // TODO: Add creator check
      allow delete: if false;
    }

    /**
     * @description Controls access to admin role data.
     * @path /roles_admin/{userId}
     * @allow (create, read, update, delete): Only existing admins can manage admin roles.
     * @deny (create, read, update, delete): Non-admins cannot manage admin roles.
     * @principle Restricts admin role management to existing admins.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing resource.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

        /**
         * @description Checks if the user has admin privileges.
         * @return {boolean} True if the user has admin privileges, false otherwise.
         */
        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
  }
}