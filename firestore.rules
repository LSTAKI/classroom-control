/**
 * @fileOverview Firestore Security Rules for the Teacher Dashboard application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, combining strict user-ownership for personal data with role-based access control for shared resources.  It focuses on preventing unauthorized access and modification of data, while allowing public read access to certain collections where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user themselves.
 * - /users/{userId}/homework/{homeworkId}: Homework assigned to a specific student, accessible only to the student.
 * - /classes/{classId}: Class information, accessible to the teacher and students in the class.
 * - /students/{studentId}: Student performance data, accessible to teachers and admins.
 * - /complaints/{complaintId}: Complaints filed by teachers, accessible to the teacher, student, and admins.
 * - /rankings/{rankingId}: Student rankings, accessible to teachers and admins.
 * - /calendar/{calendarEventId}: Calendar events, accessible to teachers, students, and parents associated with the class.
 * - /roles_admin/{userId}: Documents conferring admin privileges.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible to the user themselves.
 * - Homework assignments are private and only accessible to the assigned student.
 * - Listing of all complaints is denied to general users.
 * - Admin privileges are granted by the existence of a document in the `/roles_admin/{userId}` collection.
 * - Data validation is minimal in this prototyping phase, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - The `Class` entity includes the `teacherId` to allow direct authorization checks without needing to traverse parent documents.
 *
 * Structural Segregation:
 * - User profiles are stored separately from student data, homework, and complaints to simplify security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User 'EKGHp8tnzJa1yv5vwVEghzKWIz13' can create their profile if userId matches auth.uid.
     * @allow (get, update, delete) User 'EKGHp8tnzJa1yv5vwVEghzKWIz13' can read/update/delete their profile if userId matches auth.uid.
     * @deny User 'attackerId' cannot create/get/update/delete user 'EKGHp8tnzJa1yv5vwVEghzKWIz13' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages homework assignments for a specific user.  Only the assigned student can read/write their own homework.
     * @path /users/{userId}/homework/{homeworkId}
     * @allow (create) User 'EKGHp8tnzJa1yv5vwVEghzKWIz13' can create homework under their userId.
     * @allow (get, update, delete) User 'EKGHp8tnzJa1yv5vwVEghzKWIz13' can read/update/delete homework under their userId.
     * @deny User 'attackerId' cannot create/get/update/delete homework under user 'EKGHp8tnzJa1yv5vwVEghzKWIz13'.
     * @principle Enforces strict user-ownership for homework.
     */
    match /users/{userId}/homework/{homeworkId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages class information.  Accessible to the teacher and students in the class.
     * @path /classes/{classId}
     * @allow (get, list) Any signed-in user can read class information.
     * @allow (create) Only admins can create classes.
     * @allow (update, delete) Only admins can update/delete classes.
     * @deny Non-admins cannot create, update, or delete classes.
     * @principle Restricts class management to admins.
     */
    match /classes/{classId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages student performance data.  Accessible to teachers and admins.
     * @path /students/{studentId}
     * @allow (get, list) Teachers and Admins can read/list student data.
     * @allow (create, update, delete) Only admins can create/update/delete student data.
     * @deny Non-admins cannot create, update, or delete student data.
     * @principle Restricts student data management to admins.
     */
    match /students/{studentId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages complaints filed by teachers. Accessible to teachers (who filed), students (subject), and admins.
     * @path /complaints/{complaintId}
     * @allow (get) Teacher, student or Admin can get a complaint.
     * @deny General listing of complaints is not allowed.
     * @allow (create) Teacher can create a complaint.
     * @allow (update) Teacher, student or Admin can update a complaint.
     * @allow (delete) Only admin can delete a complaint.
     * @principle Ensures complaints are accessible to involved parties and admins only.
     */
    match /complaints/{complaintId} {
      allow get: if isAdmin() || isComplaintActor(resource.data.teacherId, resource.data.studentId);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isAdmin() || isComplaintActor(resource.data.teacherId, resource.data.studentId);
      allow delete: if isAdmin();
    }

    /**
     * @description Manages student rankings.  Accessible to teachers and admins.
     * @path /rankings/{rankingId}
     * @allow (get, list) Teachers and admins can read/list rankings.
     * @allow (create, update, delete) Only admins can create/update/delete rankings.
     * @deny Non-admins cannot create, update, or delete student rankings.
     * @principle Restricts ranking data management to admins.
     */
    match /rankings/{rankingId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Manages calendar events. Accessible to teachers, students, and parents associated with the class.
     * @path /calendar/{calendarEventId}
     * @allow (get, list) Any signed-in user can read events.
     * @allow (create) Only admins can create events.
     * @allow (update, delete) Only admins can update/delete events.
     * @deny Non-admins cannot create, update, or delete calendar events.
     * @principle Restricts calendar management to admins.
     */
    match /calendar/{calendarEventId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Confers admin privileges. The existence of a document grants admin access.
     * @path /roles_admin/{userId}
     * @allow (get) Any signed-in user can check for admin role.
     * @allow (list) Listing admin roles is not permitted.
     * @allow (create) Only the user themselves can create their admin role (for initial setup - handled by backend).
     * @allow (update, delete) Only admins can update/delete admin roles.
     * @deny Non-admins cannot modify admin roles.
     * @principle Implements role-based access control for administrative functions.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // --- Helper Functions ---

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    function isComplaintActor(teacherId, studentId) {
        return request.auth.uid == teacherId || request.auth.uid == studentId;
    }
  }
}