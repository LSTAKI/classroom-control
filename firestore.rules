/**
 * @fileoverview Firestore Security Rules for the Teacher Dashboard application.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, blending user-based ownership with role-based access control, and public read access where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, owned by the user.
 * - /users/{userId}/homework/{homeworkId}: Homework assignments specific to a student.
 * - /classes/{classId}: Class information, managed by a teacher.
 * - /students/{studentId}: Student performance data.
 * - /complaints/{complaintId}: Complaints filed by teachers, related to students.
 * - /rankings/{rankingId}: Student rankings data.
 * - /calendar/{calendarEventId}: Calendar events for classes.
 * - /roles_admin/{userId}: Documents that, if they exist, grant admin privileges.
 *
 * Key Security Decisions:
 * - User profiles are strictly owned by the user.
 * - Homework assignments are owned by the student.
 * - Classes are managed by teachers, with teacherId denormalized for efficient authorization.
 * - Admin privileges are granted by the existence of a document in /roles_admin/{userId}.
 * - Public read access is granted to the /homeworks collection.
 * - Data validation is relaxed in this prototype phase, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - The `teacherId` is stored directly in the `/classes/{classId}` document to avoid needing to perform a `get()` operation to check the teacher's ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    function isTeacherOfClass(classId) {
        return get(/databases/$(database)/documents/classes/$(classId)).data.teacherId == request.auth.uid;
    }
    
    /**
     * @description Enforces owner-only access for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces owner-only access for homework assignments within a user's scope.
     * @path /users/{userId}/homework/{homeworkId}
     * @allow (create) User with UID 'student123' can create homework assigned to them.
     * @allow (get) User with UID 'student123' can read homework assigned to them.
     * @allow (update) User with UID 'student123' can update homework assigned to them.
     * @allow (delete) User with UID 'student123' can delete homework assigned to them.
     * @deny (create) User with UID 'teacher456' cannot create homework assigned to 'student123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/homework/{homeworkId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.assignedTo == userId;
      allow update: if isOwner(userId) && resource.data.assignedTo == userId;
      allow delete: if isOwner(userId) && resource.data.assignedTo == userId;
    }

    /**
     * @description Allows teachers to manage classes they own.
     * @path /classes/{classId}
     * @allow (create) Teacher with UID 'teacher123' can create a class if teacherId is set to 'teacher123'.
     * @allow (get) Teacher with UID 'teacher123' can read a class they own.
     * @allow (update) Teacher with UID 'teacher123' can update a class they own.
     * @allow (delete) Teacher with UID 'teacher123' can delete a class they own.
     * @deny (create) Teacher with UID 'teacher456' cannot create a class owned by 'teacher123'.
     * @principle Enforces teacher ownership of classes.
     */
    match /classes/{classId} {
      allow get: if isSignedIn() && isTeacherOfClass(classId);
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
      allow update: if isSignedIn() && isTeacherOfClass(classId);
      allow delete: if isSignedIn() && isTeacherOfClass(classId);
    }

    /**
     * @description Allows teachers and admins to manage student data.
     * @path /students/{studentId}
     * @allow (get) Teacher with UID 'teacher123' can read student data.
     * @allow (create) Admin can create student data.
     * @allow (update) Admin can update student data.
     * @allow (delete) Admin can delete student data.
     * @deny (get) Regular user cannot read student data.
     * @principle Restricts access to student data to teachers and admins.
     */
    match /students/{studentId} {
      allow get: if isSignedIn() && (isAdmin() || isTeacherOfClass(resource.data.classId));
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows teachers, related students, and admins to manage complaints.
     * @path /complaints/{complaintId}
     * @allow (get) Teacher with UID 'teacher123' can read complaints they filed.
     * @allow (get) Student with UID 'student456' can read complaints filed against them.
     * @allow (create) Teacher with UID 'teacher123' can file a complaint.
     * @allow (update) Admin can update complaints.
     * @allow (delete) Admin can delete complaints.
     * @deny (get) Regular user cannot read complaints.
     * @principle Restricts access to complaints to authorized users.
     */
    match /complaints/{complaintId} {
      allow get: if isSignedIn() && (isAdmin() || request.auth.uid == resource.data.teacherId || request.auth.uid == resource.data.studentId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows teachers and admins to manage student rankings.
     * @path /rankings/{rankingId}
     * @allow (get) Teacher with UID 'teacher123' can read student rankings.
     * @allow (create) Admin can create student rankings.
     * @allow (update) Admin can update student rankings.
     * @allow (delete) Admin can delete student rankings.
     * @deny (get) Regular user cannot read student rankings.
     * @principle Restricts access to student rankings to teachers and admins.
     */
    match /rankings/{rankingId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows teachers, students, and parents associated with the class to manage calendar events.
     * @path /calendar/{calendarEventId}
     * @allow (get) Teacher with UID 'teacher123' can read calendar events for their class.
     * @allow (create) Teacher with UID 'teacher123' can create calendar events for their class.
     * @allow (update) Teacher with UID 'teacher123' can update calendar events for their class.
     * @allow (delete) Teacher with UID 'teacher123' can delete calendar events for their class.
     * @deny (get) Regular user cannot read calendar events.
     * @principle Restricts access to calendar events to authorized users.
     */
    match /calendar/{calendarEventId} {
      allow get: if isSignedIn() && (isTeacherOfClass(resource.data.classId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isTeacherOfClass(request.resource.data.classId);
      allow update: if isSignedIn() && isTeacherOfClass(resource.data.classId);
      allow delete: if isSignedIn() && isTeacherOfClass(resource.data.classId);
    }

    /**
     * @description Grants admin privileges to users with a document in this collection.
     * @path /roles_admin/{userId}
     * @allow (create) Only admins can create admin roles.
     * @allow (get) Any signed-in user can check for admin status.
     * @allow (delete) Only admins can revoke admin roles.
     * @deny (create) Non-admins cannot grant themselves admin privileges.
     * @principle Role-based access control for admin privileges.
     */
    match /roles_admin/{userId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn() && isAdmin();
        allow update: if false;
        allow delete: if isSignedIn() && isAdmin();
    }

     /**
      * @description Allows public read access to homework assignments.
      * @path /homeworks
      * @allow (get) Any user can read homework assignments.
      * @allow (list) Any user can list homework assignments.
      * @deny (create) No user can create homework assignments directly in this collection.
      * @deny (update) No user can update homework assignments directly in this collection.
      * @deny (delete) No user can delete homework assignments directly in this collection.
      * @principle Public read access with restricted writes.
      */
    match /homeworks {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}