/**
 * @file Firebase Security Rules for the Teacher Dashboard application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data,
 * role-based access for administrative functions, and shared access for
 * collaborative entities like classes. The rules prioritize security and
 * atomicity, avoiding complex queries and get() calls within rules.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user.
 * - /users/{userId}/homework/{homeworkId}: Homework assignments for a specific user, accessible only to the user (student).
 * - /classes/{classId}: Class information, accessible to the teacher of the class and students enrolled in the class.
 * - /students/{studentId}: Student performance data, accessible to teachers and admins.
 * - /complaints/{complaintId}: Complaints filed by teachers, accessible to the teacher, student (related to the complaint), and admins.
 * - /rankings/{rankingId}: Student rankings, accessible to teachers and admins.
 * - /calendar/{calendarEventId}: Calendar events, accessible to teachers, students, and parents associated with the class.
 * - /roles_admin/{userId}: Documents that grant admin privileges to the user.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to protect privacy.
 * - Data required for authorization is denormalized onto the documents to avoid costly `get()` calls.
 * - The rules assume a closed-collaboration model; shared documents explicitly list authorized users.
 *
 * Denormalization for Authorization:
 * - Class documents store the teacherId to avoid requiring a get() call to the teacher's profile when checking class access.
 *
 * Structural Segregation:
 * - User-specific data (e.g., homework) is stored under the /users/{userId} path to ensure easy ownership-based security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User can access/modify their own profile.
     * @deny (list) User profiles should not be listable.
     * @deny (create, update, delete) Other users cannot create/modify another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to homework assignments for a specific user.
     * @path /users/{userId}/homework/{homeworkId}
     * @allow (create) User (student) can create homework assignments for themselves.
     * @allow (get, list, update, delete) User (student) can access/modify their own homework assignments.
     * @deny (create, update, delete) Other users cannot create/modify another user's homework assignments.
     * @principle Enforces document ownership for homework assignments.
     */
    match /users/{userId}/homework/{homeworkId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.assignedTo == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.assignedTo == resource.data.assignedTo && resource != null;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to class information.
     * @path /classes/{classId}
     * @allow (get, list) Any signed-in user can read class information.
     * @allow (create) Only a teacher can create a class. The teacherId must match the user's UID.
     * @allow (update, delete) Only the teacher who created the class can update/delete it.
     * @deny (create, update, delete) Other users cannot create/modify classes.
     * @principle Enforces teacher ownership for classes and allows listing.
     */
    match /classes/{classId} {
      function isTeacherOfClass(teacherId) {
        return request.auth.uid == teacherId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isTeacherOfClass(request.resource.data.teacherId);
      allow update: if isSignedIn() && isTeacherOfClass(resource.data.teacherId) && resource != null;
      allow delete: if isSignedIn() && isTeacherOfClass(resource.data.teacherId) && resource != null;
    }

    /**
     * @description Grants access to student performance data.
     * @path /students/{studentId}
     * @allow (get, list) Any signed-in user can read student information.
     * @allow (create) Only an admin can create a student.
     * @allow (update, delete) Only an admin can update/delete student information.
     * @deny (create, update, delete) Other users cannot create/modify student information.
     * @principle Enforces admin control for student data.
     */
    match /students/{studentId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Grants access to complaints filed by teachers.
     * @path /complaints/{complaintId}
     * @allow (get, list) Any signed-in user can read complaint information.
     * @allow (create) Only a teacher can create a complaint, and the teacherId must match their UID.
     * @allow (update, delete) Only the teacher who created the complaint or an admin can update/delete it.
     * @deny (create, update, delete) Other users cannot create/modify complaints.
     * @principle Enforces teacher ownership and admin override for complaints.
     */
    match /complaints/{complaintId} {
      function isComplaintAuthor(teacherId) {
        return request.auth.uid == teacherId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isComplaintAuthor(request.resource.data.teacherId);
      allow update: if isSignedIn() && (isComplaintAuthor(resource.data.teacherId) || isAdmin()) && resource != null;
      allow delete: if isSignedIn() && (isComplaintAuthor(resource.data.teacherId) || isAdmin()) && resource != null;
    }

    /**
     * @description Grants access to student rankings.
     * @path /rankings/{rankingId}
     * @allow (get, list) Any signed-in user can read ranking information.
     * @allow (create) Only an admin can create a ranking.
     * @allow (update, delete) Only an admin can update/delete ranking information.
     * @deny (create, update, delete) Other users cannot create/modify rankings.
     * @principle Enforces admin control for ranking data.
     */
    match /rankings/{rankingId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Grants access to calendar events.
     * @path /calendar/{calendarEventId}
     * @allow (get, list) Any signed-in user can read calendar event information.
     * @allow (create) Any signed-in user can create a calendar event.
     * @allow (update, delete) Only the user who created the event or an admin can update/delete it.
     * @deny (create, update, delete) Other users cannot create/modify calendar events.
     * @principle Allows open read access to calendar events.
     */
    match /calendar/{calendarEventId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants admin privileges based on document existence.
     * @path /roles_admin/{userId}
     * @allow (get) Any signed-in user can check for admin privileges (used by isAdmin() function).
     * @allow (create) Only accessible via backend functions, not directly from client apps.
     * @allow (update, delete) Only accessible via backend functions.
     * @deny (list) Admin role assignments should not be listable.
     * @principle Role-based access control via document existence.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false; // Only managed by backend functions
      allow update: if false; // Only managed by backend functions
      allow delete: if false; // Only managed by backend functions
    }

     /**
      * @description Grants access to homework assignments.
      * @path /homeworks
      * @allow (get, list) Any signed-in user can read homework assignments.
      * @allow (create) Only the teacher can create a homework assignment. The assignedBy must match the teacher's UID.
      * @allow (update, delete) Only the teacher who created the homework can update/delete it.
      * @deny (create, update, delete) Other users cannot create/modify homework assignments.
      * @principle Enforces teacher ownership for homework assignments.
      */
     match /homeworks/{homeworkId} {
        function isTeacher(teacherId) {
           return request.auth.uid == teacherId;
         }

        function isSignedIn() {
           return request.auth != null;
         }

         allow get, list: if isSignedIn();
         allow create: if isSignedIn() && isTeacher(request.resource.data.assignedBy);
         allow update: if isSignedIn() && isTeacher(resource.data.assignedBy) && resource != null;
         allow delete: if isSignedIn() && isTeacher(resource.data.assignedBy) && resource != null;
     }
  }
}