/**
 * @file Firestore Security Rules for the Teacher Dashboard application.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user profiles and leverages denormalized data for authorization in other collections. It prioritizes security by default, restricting access unless explicitly granted.
 * @dataStructure The data is organized into top-level collections for `users`, `classes`, `students`, `complaints`, `homeworks`, `rankings`, and `calendar_events`. User-specific data is nested under `/users/{userId}`.
 * @keySecurityDecisions
 *   - User listing is disallowed.
 *   - All write operations require authentication.
 *   - The rules do NOT perform extensive data validation (data types, required fields, etc.) beyond what's necessary for authorization and relational integrity.
 * @denormalizationForAuthorization Teacher and Student IDs are denormalized to the Class, Complaint, and Homework documents. This allows for efficient authorization checks without needing extra `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the authenticated user to read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create a profile with document ID 'user123'.
     * @allow (get, update, delete) User with UID 'user123' can access their profile at /users/user123.
     * @deny (create) User with UID 'user123' cannot create a profile with document ID 'otherUser'.
     * @deny (get, update, delete) User with UID 'user456' cannot access the profile at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures class data, allowing teachers to create, update, and delete classes.
     * @path /classes/{classId}
     * @allow (create, update, delete) Teacher with UID 'teacher123' can manage a class they own.
     * @deny (create, update, delete) Student with UID 'student456' cannot manage classes.
     * @principle Restricts class management to teachers.
     */
    match /classes/{classId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures student data, allowing teachers to read student information.
     * @path /students/{studentId}
     * @allow (get, list) Teacher with UID 'teacher123' can view student data.
     * @deny (create, update, delete) Students cannot create, update, or delete student data.
     * @principle Restricts student data management to teachers.
     */
    match /students/{studentId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures complaints, allowing teachers to create complaints.
     * @path /complaints/{complaintId}
     * @allow (create) Teacher with UID 'teacher123' can file a complaint.
     * @deny (update, delete) Students cannot modify complaints.
     * @principle Restricts complaint management to teachers.
     */
    match /complaints/{complaintId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures homework assignments, allowing teachers to create assignments.
     * @path /homeworks/{homeworkId}
     * @allow (create) Teacher with UID 'teacher123' can assign homework.
     * @deny (update, delete) Students cannot modify homework assignments.
     * @principle Restricts homework management to teachers.
     */
    match /homeworks/{homeworkId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures rankings data, allowing teachers to read and update rankings.
     * @path /rankings/{rankingId}
     * @allow (get, list, update) Teacher with UID 'teacher123' can manage rankings.
     * @deny (create, delete) Students cannot create or delete rankings.
     * @principle Restricts ranking management to teachers.
     */
    match /rankings/{rankingId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Secures calendar events, allowing teachers to manage events.
     * @path /calendar_events/{calendarEventId}
     * @allow (create, update, delete) Teacher with UID 'teacher123' can manage calendar events.
     * @deny (get, list) Students cannot list calendar events.
     * @principle Restricts calendar event management to teachers.
     */
    match /calendar_events/{calendarEventId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Restricts admin role management to only authenticated users.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Global function to check if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Global function to check if the user is the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Global function to check if the user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}