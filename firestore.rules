/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control system with a focus on ownership and data segregation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the user themselves.
 * - /classes/{classId}: Stores class information. Teachers can read and update classes they manage.
 * - /complaints/{complaintId}: Stores complaints filed by teachers. Teachers can only manage complaints they created.
 * - /homeworks/{homeworkId}: Stores homework assignments. Teachers can create and manage homework assigned to their classes.
 * - /homeworks/{homeworkId}/submissions/{submissionId}: Stores homework submissions. Students can only create/update their own submissions. Teachers can read all submissions for their homework.
 * - /rankings/{rankingId}: Stores student rankings. Admins have full access.
 * - /calendar_events/{calendarEventId}: Stores calendar events. Teachers can create and manage events for their classes.
 *
 * Key Security Decisions:
 * - Strict user ownership for user profiles.
 * - Teachers can manage classes and homework they create.
 * - Teachers can only manage complaints they created.
 * - Admins have full access to rankings and calendar events.
 * - Homework submissions are restricted to the submitting student and the assigning teacher.
 *
 * Denormalization for Authorization:
 * - The `homeworkSubmissions` subcollection includes the `studentId`, and `teacherId` denormalized from the parent `homework` document and user profile, enabling rules to validate access based on the requesting user's ID without needing to perform `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-level access control for user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner (userId).
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check if the user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to class documents. Teachers can manage classes they own.
     * @path /classes/{classId}
     * @allow (get, list) if true (for prototyping)
     * @allow (create, update, delete) if the user is the teacher of the class.
     * @deny (create, update, delete) if the user is not the teacher of the class.
     * @principle Enforces teacher ownership for class management.
     */
    match /classes/{classId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user is the teacher of the class.
      function isTeacher(teacherId) {
        return request.auth.uid == teacherId;
      }

      // Check if the user is the existing teacher of the class.
      function isExistingTeacher(teacherId) {
        return isTeacher(teacherId) && resource.data != null;
      }

      allow get: if true; // Public read for prototyping.  In production, restrict to teachers/students.
      allow list: if true; // Public list for prototyping.  In production, restrict to teachers/students.
      allow create: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.teacherId == request.auth.uid;
    }

    /**
     * @description Manages access to complaint documents. Teachers can only manage complaints they created.
     * @path /complaints/{complaintId}
     * @allow (get, list) if true (for prototyping).
     * @allow (create, update, delete) if the user is the teacher who created the complaint.
     * @deny (create, update, delete) if the user is not the creator.
     * @principle Enforces creator ownership for complaint management.
     */
    match /complaints/{complaintId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user is the teacher who created the complaint.
      function isComplaintCreator(teacherId) {
        return request.auth.uid == teacherId;
      }

      // Check if the user is the existing creator of the complaint.
      function isExistingComplaintCreator(teacherId) {
        return isComplaintCreator(teacherId) && resource.data != null;
      }

      allow get: if true; // Public read for prototyping.  In production, restrict to teachers/admins.
      allow list: if true; // Public list for prototyping.  In production, restrict to teachers/admins.
      allow create: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.teacherId == request.auth.uid;
    }

    /**
     * @description Controls access to homework assignments. Teachers can create and manage homework assigned to their classes.
     * @path /homeworks/{homeworkId}
     * @allow (get, list) if true (for prototyping).
     * @allow (create, update, delete) if the user is the teacher who assigned the homework.
     * @deny (create, update, delete) if the user is not the assigner.
     * @principle Enforces assigner ownership for homework management.
     */
    match /homeworks/{homeworkId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Check if the user is the teacher who assigned the homework.
      function isHomeworkAssigner(teacherId) {
        return request.auth.uid == teacherId;
      }

      // Check if the user is the existing assigner of the homework.
      function isExistingHomeworkAssigner(teacherId) {
        return isHomeworkAssigner(teacherId) && resource.data != null;
      }

      allow get: if true; // Public read for prototyping.  In production, restrict to teachers/students.
      allow list: if true; // Public list for prototyping.  In production, restrict to teachers/students.
      allow create: if isSignedIn() && request.resource.data.assignedBy == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.assignedBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.assignedBy == request.auth.uid;

      /**
       * @description Controls access to homework submissions. Students can only create/update their own submissions. Teachers can read all submissions for their homework.
       * @path /homeworks/{homeworkId}/submissions/{submissionId}
       * @allow (get, list) if the user is the teacher who assigned the homework or the student who submitted the homework.
       * @allow (create, update) if the user is the student submitting the homework.
       * @deny (create, update, delete) if the user is not the student or the teacher.
       * @principle Enforces ownership and teacher access for homework submissions.
       */
      match /submissions/{submissionId} {
        // Check if the user is signed in.
        function isSignedIn() {
          return request.auth != null;
        }

        // Check if the user is the student who submitted the homework.
        function isSubmissionOwner(studentId) {
          return request.auth.uid == studentId;
        }

        // Check if the user is the teacher who assigned the homework.
        function isHomeworkAssigner(homeworkId) {
          return get(/databases/$(database)/documents/homeworks/$(homeworkId)).data.assignedBy == request.auth.uid;
        }

        allow get: if isSignedIn() && (isSubmissionOwner(resource.data.studentId) || isHomeworkAssigner(homeworkId));
        allow list: if isSignedIn() && isHomeworkAssigner(homeworkId);
        allow create: if isSignedIn() && request.resource.data.studentId == request.auth.uid;
        allow update: if isSignedIn() && request.resource.data.studentId == request.auth.uid;
        allow delete: if false; // Submissions should not be deleted directly.
      }
    }

    /**
     * @description Controls access to student rankings. Admins have full access.
     * @path /rankings/{rankingId}
     * @allow (get, list) if true (for prototyping).
     * @allow (create, update, delete) if false (no specific access control implemented).
     * @deny (create, update, delete) if true.
     */
    match /rankings/{rankingId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the user has the 'admin' role.  This is a placeholder; in a real application,
      // you would likely need to query a user document to check roles.
      function isAdmin() {
        return false; // Replace with actual admin check logic
      }

      allow get: if true; // Public read for prototyping. In production, restrict to admins.
      allow list: if true; // Public list for prototyping. In production, restrict to admins.
      allow create: if isSignedIn() && isAdmin(); // TODO: Add admin role check
      allow update: if isSignedIn() && isAdmin(); // TODO: Add admin role check
      allow delete: if isSignedIn() && isAdmin(); // TODO: Add admin role check
    }

    /**
     * @description Manages access to calendar events. Teachers can create and manage events for their classes. Admins have full access.
     * @path /calendar_events/{calendarEventId}
     * @allow (get, list) if true (for prototyping).
     * @allow (create, update, delete) if false (no specific access control implemented).
     * @deny (create, update, delete) if true.
     */
    match /calendar_events/{calendarEventId} {
      // Check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the user has the 'admin' role.  This is a placeholder; in a real application,
      // you would likely need to query a user document to check roles.
      function isAdmin() {
        return false; // Replace with actual admin check logic
      }

      allow get: if true; // Public read for prototyping.  In production, restrict to teachers/admins.
      allow list: if true; // Public list for prototyping.  In production, restrict to teachers/admins.
      allow create: if isSignedIn() && isAdmin(); // TODO: Add teacher/admin role check
      allow update: if isSignedIn() && isAdmin(); // TODO: Add teacher/admin role check
      allow delete: if isSignedIn() && isAdmin(); // TODO: Add teacher/admin role check
    }
  }
}