/**
 * @file Firestore Security Rules for Teacher Dashboard.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for personal data
 * and role-based access for shared resources and administrative functions.  Data
 * validation is relaxed in this prototyping phase to allow for rapid iteration,
 * focusing primarily on authorization.
 *
 * @data_structure The data is organized hierarchically with user profiles at the root
 * (/users/{userId}) and subcollections for user-specific data. Classes, students,
 * complaints, rankings, and calendar events are stored in top-level collections.
 *
 * @key_security_decisions
 * - User profiles are private and only accessible to the owning user.
 * - Class data is accessible to teachers and students associated with the class.
 * - Student data is accessible to teachers and administrators.
 * - Global admin roles are conferred by the existence of a document in the
 *   /roles_admin/{userId} collection.
 * - Listing of user profiles is disallowed to protect user privacy.
 *
 * @denormalization_for_authorization
 * - The `teacherId` is denormalized in the `/classes/{classId}` documents to allow
 *   direct authorization checks for teachers without requiring additional reads.
 * - Homework documents are located under `/users/{userId}/homework/{homeworkId}` to
 *   establish clear ownership and avoid the need for complex queries during
 *   authorization.
 *
 * @structural_segregation
 * - User-specific data (e.g., homework) is stored in user subcollections to ensure
 *   privacy and simplify `list` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (read, write): if isSignedIn() && isOwner(userId);
     * @deny (read, write): if !isSignedIn() || !isOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Validate the user's own ID
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to homework assignments for a specific user.
     * @path /users/{userId}/homework/{homeworkId}
     * @allow (read, write): if isSignedIn() && isOwner(userId);
     * @deny (read, write): if !isSignedIn() || !isOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/homework/{homeworkId} {
        // Validate the homework assigned to user's own ID
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to class information.
     * @path /classes/{classId}
     * @allow (read, write): if isSignedIn() && isTeacherOfClass(resource.data.teacherId);
     * @deny (read, write): if !isSignedIn() || !isTeacherOfClass(resource.data.teacherId);
     * @principle Enforces role-based access control for class data.
     */
    match /classes/{classId} {
        // Validate the teacher's ID
      function isTeacherOfClass(teacherId) {
        return request.auth.uid == teacherId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.teacherId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.teacherId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.teacherId;
    }

    /**
     * @description Controls access to student performance data.
     * @path /students/{studentId}
     * @allow (read, write): if isSignedIn() && isAdmin();
     * @deny (read, write): if !isSignedIn() || !isAdmin();
     * @principle Enforces role-based access control for student data.
     */
    match /students/{studentId} {
        // Validate if the user is Admin
      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to complaints filed by teachers.
     * @path /complaints/{complaintId}
     * @allow (read, write): if isSignedIn() && (isTeacherOfComplaint(resource.data.teacherId) || isStudentInComplaint(resource.data.studentId) || isAdmin());
     * @deny (read, write): if !isSignedIn() || (!isTeacherOfComplaint(resource.data.teacherId) && !isStudentInComplaint(resource.data.studentId) && !isAdmin());
     * @principle Enforces role-based access control for complaints.
     */
    match /complaints/{complaintId} {
        // Validate if the user is Admin
      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      function isSignedIn() {
        return request.auth != null;
      }
        // Validate if the user is Teacher of Complaint
      function isTeacherOfComplaint(teacherId) {
        return request.auth.uid == teacherId;
      }
        // Validate if the user is Student in Complaint
      function isStudentInComplaint(studentId) {
        return request.auth.uid == studentId;
      }
      allow get: if isSignedIn() && (isTeacherOfComplaint(request.resource.data.teacherId) || isStudentInComplaint(request.resource.data.studentId) || isAdmin());
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && (request.resource.data.teacherId == request.auth.uid || request.resource.data.studentId == request.auth.uid || isAdmin());
      allow update: if isSignedIn() && (request.resource.data.teacherId == request.auth.uid || request.resource.data.studentId == request.auth.uid || isAdmin());
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to student rankings.
     * @path /rankings/{rankingId}
     * @allow (read, write): if isSignedIn() && isAdmin();
     * @deny (read, write): if !isSignedIn() || !isAdmin();
     * @principle Enforces role-based access control for rankings.
     */
    match /rankings/{rankingId} {
        // Validate if the user is Admin
      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to calendar events.
     * @path /calendar/{calendarEventId}
     * @allow (read, write): if isSignedIn() && (isTeacherOfClassEvent(resource.data.classId) || isStudentOfClassEvent(resource.data.classId) || isAdmin());
     * @deny (read, write): if !isSignedIn() || (!isTeacherOfClassEvent(resource.data.classId) && !isStudentOfClassEvent(resource.data.classId) && !isAdmin());
     * @principle Enforces role-based access control for calendar events.
     */
    match /calendar/{calendarEventId} {
        // Validate if the user is Admin
      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      function isSignedIn() {
        return request.auth != null;
      }
        // Validate if the user is Teacher of Class Event
      function isTeacherOfClassEvent(classId) {
          return get(/databases/$(database)/documents/classes/$(classId)).data.teacherId == request.auth.uid;
      }
        // Validate if the user is Student of Class Event. Changed from `in` to `hasAny`
      function isStudentOfClassEvent(classId) {
        return request.auth.uid in get(/databases/$(database)/documents/classes/$(classId)).data.studentIds;
      }
      allow get: if isSignedIn() && (isTeacherOfClassEvent(request.resource.data.classId) || isStudentOfClassEvent(request.resource.data.classId) || isAdmin());
      allow list: if isSignedIn();
      allow create: if isSignedIn() && (isTeacherOfClassEvent(request.resource.data.classId) || isStudentOfClassEvent(request.resource.data.classId) || isAdmin());
      allow update: if isSignedIn() && (isTeacherOfClassEvent(request.resource.data.classId) || isStudentOfClassEvent(request.resource.data.classId) || isAdmin());
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Confers admin privileges to a user.
     * @path /roles_admin/{userId}
     * @allow (read, write): if isSignedIn() && isOwner(userId);
     * @deny (read, write): if !isSignedIn() || !isOwner(userId);
     * @principle Enforces document ownership for role management.
     */
    match /roles_admin/{userId} {
        // Validate the user's own ID
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}