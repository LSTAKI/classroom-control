/**
 * @fileoverview Firestore Security Rules for the Teacher Dashboard application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and role-based access control.
 * User data is secured using path-based ownership, while collaborative data leverages denormalized membership maps.
 * The design prioritizes authorization independence, avoiding `get()` calls within rules.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /classes/{classId}: Stores class data, accessible to teachers associated with the class.
 * - /students/{studentId}: Stores student data, accessible by teachers.
 * - /complaints/{complaintId}: Stores complaints, accessible to the teacher and student involved, and admins.
 * - /homeworks/{homeworkId}: Stores homework assignments, accessible to the assigned teacher and student.
 * - /rankings/{rankingId}: Stores student rankings, accessible to teachers and students.
 * - /calendar_events/{calendarEventId}: Stores calendar events, accessible to teachers and students in the relevant class.
 * - /roles_admin/{userId}: Indicates admin status for a user.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Data types are not strictly enforced, focusing on authorization for prototyping.
 * - The ruleset defaults to strict owner-only access where relationships are ambiguous.
 *
 * Denormalization for Authorization:
 * - TeacherId is denormalized into each class document for efficient teacher-class authorization.
 * - StudentIds are denormalized into Complaint documents for efficient access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the user to read and write their own data.
     * @path /users/{userId}
     * @allow (create) User with UID 'SJqRDil78qQjL1bS5Z5FSvOzNAr1' can create their profile if userId matches their UID.
     * @allow (get, update, delete) User with UID 'SJqRDil78qQjL1bS5Z5FSvOzNAr1' can read, update, and delete their profile if userId matches their UID.
     * @deny (create, update, delete) User with UID 'OtherUser' cannot create, update, or delete the profile of user 'SJqRDil78qQjL1bS5Z5FSvOzNAr1'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures class data, allowing teachers to manage their classes.
     * @path /classes/{classId}
     * @allow (create) Teacher with UID 'teacher123' can create a class.
     * @allow (get, update, delete) Teacher with UID 'teacher123' can read, update and delete a class if they are the teacher.
     * @deny (create, update, delete) Student with UID 'student123' cannot create, update, or delete a class.
     * @principle Enforces teacher-based ownership for class management.
     */
    match /classes/{classId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures student data, accessible by teachers.
     * @path /students/{studentId}
     * @allow (create) Teacher with UID 'teacher123' can create a student profile.
     * @allow (get, update, delete) Teacher with UID 'teacher123' can read, update and delete a student profile.
     * @deny (create, update, delete) Student with UID 'student123' cannot create, update, or delete another student's profile.
     * @principle Restricts student management to authorized teachers.
     */
    match /students/{studentId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures complaints, accessible to teachers, students, and admins.
     * @path /complaints/{complaintId}
     * @allow (create) Teacher with UID 'teacher123' can create a complaint.
     * @allow (get, update, delete) Teacher or student involved can read, update, and delete the complaint. Admin can also access.
     * @deny (create, update, delete) Unauthorized user cannot create, update, or delete a complaint.
     * @principle Allows authorized users to manage complaints.
     */
    match /complaints/{complaintId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures homework assignments, accessible to assigned teachers and students.
     * @path /homeworks/{homeworkId}
     * @allow (create) Teacher with UID 'teacher123' can create a homework assignment.
     * @allow (get, update, delete) Assigned teacher or student can read, update, and delete the homework assignment.
     * @deny (create, update, delete) Unauthorized user cannot create, update, or delete a homework assignment.
     * @principle Limits access to homework assignments to authorized personnel.
     */
    match /homeworks/{homeworkId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();

          /**
           * @description Secures submissions for a specific homework assignment.
           * @path /homeworks/{homeworkId}/submissions/{submissionId}
           * @allow (create) Student with UID 'student123' can create a submission if assigned the homework.
           * @allow (get, update, delete) Assigned teacher or student can read, update, and delete their submission.
           * @deny (list) Non authorized users cannot list.
           * @principle Limits access to homework submissions to authorized personnel.
           */
          match /submissions/{submissionId} {
            allow get: if isSignedIn();
            allow list: if false;
            allow create: if isSignedIn();
            allow update: if isSignedIn();
            allow delete: if isSignedIn();
          }
    }

    /**
     * @description Secures student rankings, accessible to teachers and students.
     * @path /rankings/{rankingId}
     * @allow (create) Teacher with UID 'teacher123' can create a ranking.
     * @allow (get, update, delete) Teacher or student can read, update, and delete a ranking.
     * @deny (create, update, delete) Unauthorized user cannot create, update, or delete a ranking.
     * @principle Allows authorized users to manage student rankings.
     */
    match /rankings/{rankingId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secures calendar events, accessible to teachers and students in the relevant class.
     * @path /calendar_events/{calendarEventId}
     * @allow (create) Teacher with UID 'teacher123' can create a calendar event.
     * @allow (get, update, delete) Teacher or student in the class can read, update, and delete the event.
     * @deny (create, update, delete) Unauthorized user cannot create, update, or delete a calendar event.
     * @principle Limits access to calendar events to authorized class members.
     */
    match /calendar_events/{calendarEventId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

      /**
       * @description Admin role access
       * @path /roles_admin/{userId}
       * @allow (create, get, update, delete) Admin user can create get update delete role.
       *  @principle Limits access to calendar events to authorized class members.
       */
    match /roles_admin/{userId} {
          allow get: if isAdmin();
          allow list: if false;
          allow create: if isAdmin();
          allow update: if isAdmin();
          allow delete: if isAdmin();
    }
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of the document, and the document exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource.data != null;
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

    // Helper function to determine if the user is an admin.
  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}