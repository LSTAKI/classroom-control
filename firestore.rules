/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant, role-based access control model.
 * Access is generally restricted to the owner of the data or users with
 * elevated roles (e.g., admins, teachers managing their classes).  It
 * prioritizes security by default, requiring explicit rules to grant
 * access.  The rules leverage denormalization where appropriate to avoid
 * costly `get()` operations within the security rules.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user and admins.
 * - /classes/{classId}: Stores class information, accessible by teachers who manage the class.
 * - /complaints/{complaintId}: Stores complaints, accessible by the teacher who created the complaint, the student the complaint concerns and admins.
 * - /homeworks/{homeworkId}: Stores homework, accessible by the teacher who assigned it.
 * - /homeworks/{homeworkId}/submissions/{submissionId}: Stores homework submissions, accessible by the student who created it and the teacher who assigned the homework.
 * - /rankings/{rankingId}: Stores student rankings, accessible by admins.
 * - /calendar_events/{calendarEventId}: Stores calendar events, accessible by the teacher who created the event and admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Strict ownership is enforced for user-specific data.
 * - The rules are designed to be maintainable and auditable through the use of helper functions.
 *
 * Denormalization for Authorization:
 * - Homework submissions include the `studentId` and `teacherId` (denormalized from both Homework and User documents) to allow independent authorization checks.
 *
 * Structural Segregation:
 * - User profiles are stored in a dedicated /users/{userId} collection, ensuring private access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    // Match statements

    /**
     * @description Manages user profiles.
     * @path /users/{userId}
     * @allow (create) User 'SJqRDil78qQjL1bS5Z5FSvOzNAr1' can create their profile.
     * @deny (create) User 'SJqRDil78qQjL1bS5Z5FSvOzNAr1' cannot create another user's profile.
     * @allow (get) User 'SJqRDil78qQjL1bS5Z5FSvOzNAr1' can read their profile.
     * @deny (get) User 'SJqRDil78qQjL1bS5Z5FSvOzNAr2' cannot read User 'SJqRDil78qQjL1bS5Z5FSvOzNAr1' profile.
     * @allow (update) User 'SJqRDil78qQjL1bS5Z5FSvOzNAr1' can update their profile.
     * @deny (update) User 'SJqRDil78qQjL1bS5Z5FSvOzNAr2' cannot update User 'SJqRDil78qQjL1bS5Z5FSvOzNAr1' profile.
     * @allow (delete) User 'SJqRDil78qQjL1bS5Z5FSvOzNAr1' can delete their profile.
     * @deny (delete) User 'SJqRDil78qQjL1bS5Z5FSvOzNAr2' cannot delete User 'SJqRDil78qQjL1bS5Z5FSvOzNAr1' profile.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces document ownership for writes and restricts listing.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Manages class information.
     * @path /classes/{classId}
     * @allow (create) Teachers can create classes.
     * @deny (create) Students cannot create classes.
     * @allow (get) Teachers and students can read class information.
     * @deny (get) Unauthorized users cannot read class information.
     * @allow (update) Teachers can update classes they manage.
     * @deny (update) Students cannot update class information.
     * @allow (delete) Teachers can delete classes they manage.
     * @deny (delete) Students cannot delete classes.
     * @deny (list) Listing all classes is not allowed.
     * @principle Restricts write access to teachers managing the class.
     */
    match /classes/{classId} {
      allow create: if isSignedIn(); // TODO: Add teacher role check if needed.
      allow get: if isSignedIn();     // TODO: Refine read access based on class membership.
      allow update: if isSignedIn(); // TODO: Add teacher role and ownership check.
      allow delete: if isSignedIn(); // TODO: Add teacher role and ownership check.
      allow list: if false;
    }

    /**
     * @description Manages complaints filed by teachers.
     * @path /complaints/{complaintId}
     * @allow (create) Teachers can file complaints.
     * @deny (create) Students cannot file complaints.
     * @allow (get) Teachers and admins can read complaints.
     * @deny (get) Unauthorized users cannot read complaints.
     * @allow (update) Teachers can update their own complaints.
     * @deny (update) Teachers cannot update others' complaints.
     * @allow (delete) Teachers can delete their own complaints.
     * @deny (delete) Teachers cannot delete others' complaints.
     * @deny (list) Listing all complaints is not allowed.
     * @principle Restricts write access to teachers who created the complaint.
     */
    match /complaints/{complaintId} {
      allow create: if isSignedIn(); // TODO: Add teacher role check if needed.
      allow get: if isSignedIn();    // TODO: Refine read access based on roles.
      allow update: if isSignedIn() && resource != null;  // TODO: Add teacher ownership check.
      allow delete: if isSignedIn() && resource != null;  // TODO: Add teacher ownership check.
      allow list: if false;
    }

    /**
     * @description Manages homework assignments.
     * @path /homeworks/{homeworkId}
     * @allow (create) Teachers can create homework assignments.
     * @deny (create) Students cannot create homework assignments.
     * @allow (get) Anyone can read homework assignments.
     * @allow (list) Anyone can list homework assignments.
     * @allow (update) Teachers can update their homework assignments.
     * @deny (update) Students cannot update homework assignments.
     * @allow (delete) Teachers can delete their homework assignments.
     * @deny (delete) Students cannot delete homework assignments.
     * @principle Restricts write access to teachers who created the homework.
     */
    match /homeworks/{homeworkId} {
      allow create: if isSignedIn(); // TODO: Add teacher role check if needed.
      allow get: if true;
      allow list: if true;
      allow update: if isSignedIn() && resource != null; // TODO: Add teacher ownership check.
      allow delete: if isSignedIn() && resource != null; // TODO: Add teacher ownership check.
    }

    /**
     * @description Manages homework submissions.
     * @path /homeworks/{homeworkId}/submissions/{submissionId}
     * @allow (create) Students can create homework submissions.
     * @deny (create) Teachers cannot create homework submissions.
     * @allow (get) Anyone can read homework submissions.
     * @allow (list) Teachers can list homework submissions for a specific homework.
     * @allow (update) Students can update their own homework submissions.
     * @deny (update) Students cannot update others' homework submissions.
     * @allow (delete) Students can delete their own homework submissions.
     * @deny (delete) Students cannot delete others' homework submissions.
     * @principle Restricts write access to the student who created the submission and read access to the teacher who created the homework.
     */
    match /homeworks/{homeworkId}/submissions/{submissionId} {
      allow create: if isSignedIn(); // TODO: Add student ownership check.
      allow get: if isSignedIn();    // TODO: Refine read access.
      allow list: if isSignedIn();   // TODO: Refine list access.
      allow update: if isSignedIn() && resource != null; // TODO: Add student ownership check.
      allow delete: if isSignedIn() && resource != null; // TODO: Add student ownership check.
    }

    /**
     * @description Manages student rankings.
     * @path /rankings/{rankingId}
     * @allow (create) Admins can create student rankings.
     * @deny (create) Non-admins cannot create student rankings.
     * @allow (get) Anyone can read student rankings.
     * @allow (list) Anyone can list student rankings.
     * @allow (update) Admins can update student rankings.
     * @deny (update) Non-admins cannot update student rankings.
     * @allow (delete) Admins can delete student rankings.
     * @deny (delete) Non-admins cannot delete student rankings.
     * @principle Restricts write access to admins.
     */
    match /rankings/{rankingId} {
      allow create: if isSignedIn(); // TODO: Add admin role check.
      allow get: if true;
      allow list: if true;
      allow update: if isSignedIn() && resource != null; // TODO: Add admin role check.
      allow delete: if isSignedIn() && resource != null; // TODO: Add admin role check.
    }

    /**
     * @description Manages calendar events.
     * @path /calendar_events/{calendarEventId}
     * @allow (create) Teachers and admins can create calendar events.
     * @deny (create) Students cannot create calendar events.
     * @allow (get) Anyone can read calendar events.
     * @allow (list) Anyone can list calendar events.
     * @allow (update) Teachers and admins can update calendar events.
     * @deny (update) Students cannot update calendar events.
     * @allow (delete) Teachers and admins can delete calendar events.
     * @deny (delete) Students cannot delete calendar events.
     * @principle Restricts write access to teachers and admins.
     */
    match /calendar_events/{calendarEventId} {
      allow create: if isSignedIn(); // TODO: Add teacher or admin role check.
      allow get: if true;
      allow list: if true;
      allow update: if isSignedIn() && resource != null; // TODO: Add teacher or admin role check.
      allow delete: if isSignedIn() && resource != null; // TODO: Add teacher or admin role check.
    }
  }
}