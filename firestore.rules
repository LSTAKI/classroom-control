/**
 * @file Firebase Security Rules for Teacher Dashboard Application
 *
 * @core_philosophy This ruleset prioritizes strict user-ownership for personal data while leveraging denormalized role-based access control for shared resources.
 *
 * @data_structure
 *   - `/users/{userId}`: User profile information, accessible only to the user themselves.
 *   - `/classes/{classId}`: Class data, accessible to teachers who own the class.
 *   - `/students/{studentId}`: Student data, accessible to teachers.
 *   - `/complaints/{complaintId}`: Complaints, accessible to teachers, students and admins.
 *   - `/homeworks/{homeworkId}`: Homework assignments, accessible to teachers, students and parents.
 *   - `/rankings/{rankingId}`: Student rankings, accessible to teachers, students and parents.
 *   - `/calendar_events/{calendarEventId}`: Calendar events, accessible to teachers, students and parents.
 *   - `/roles_admin/{userId}`: Indicates a user has admin role.
 *
 * @key_security_decisions
 *   - User listing is disabled to prevent information harvesting.
 *   - Read-only collections are explicitly marked to allow public read access.
 *   - Ambiguous relationships default to the most secure interpretation (owner-only).
 *
 * @denormalization_for_authorization
 *   - Teacher ID is included in class documents to avoid additional reads for authorization.
 *   - Student IDs are included in complaint documents to enable easier filtering.
 *
 * @structural_segregation
 *   - User profiles are stored separately from class data, each with distinct security requirements.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their profile with matching UID.
     * @deny (create) Signed-in user attempts to create a profile for another user.
     * @allow (get, list, update, delete) Signed-in user reads, updates, or deletes their own profile.
     * @deny (get, list, update, delete) Signed-in user attempts to read, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // prevent user enumeration

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages class data, allowing teachers to create, update, and delete classes.
     * @path /classes/{classId}
     * @allow (create) Teacher creates a new class.
     * @deny (create) Non-teacher attempts to create a class.
     * @allow (get, list) Anyone can read all classes.
     * @allow (update, delete) Teacher updates or deletes their own class.
     * @deny (update, delete) Non-teacher attempts to update or delete a class.
     * @principle Enforces teacher-ownership for write operations, allows public read.
     */
    match /classes/{classId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      // TODO: Add teacher role validation. Current isSignedIN() allows everyone to write
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages student data, allowing teachers to create, update, and delete students.
     * @path /students/{studentId}
     * @allow (create) Teacher creates a new student.
     * @deny (create) Non-teacher attempts to create a student.
     * @allow (get, list) Anyone can read all students.
     * @allow (update, delete) Teacher updates or deletes a student.
     * @deny (update, delete) Non-teacher attempts to update or delete a student.
     * @principle Enforces teacher-only for write operations, allows public read.
     */
    match /students/{studentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      // TODO: Add teacher role validation. Current isSignedIN() allows everyone to write
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages complaints, allowing teachers to create, update, and delete complaints.
     * @path /complaints/{complaintId}
     * @allow (create) Teacher creates a new complaint.
     * @deny (create) Non-teacher attempts to create a complaint.
     * @allow (get, list) Anyone can read all complaints.
     * @allow (update, delete) Teacher updates or deletes a complaint.
     * @deny (update, delete) Non-teacher attempts to update or delete a complaint.
     * @principle Enforces teacher-only for write operations, allows public read.
     */
    match /complaints/{complaintId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      // TODO: Add teacher role validation. Current isSignedIN() allows everyone to write
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages homework assignments, allowing teachers to create, update, and delete homeworks.
     * @path /homeworks/{homeworkId}
     * @allow (create) Teacher creates a new homework.
     * @deny (create) Non-teacher attempts to create a homework.
     * @allow (get, list) Anyone can read all homeworks.
     * @allow (update, delete) Teacher updates or deletes a homework.
     * @deny (update, delete) Non-teacher attempts to update or delete a homework.
     * @principle Enforces teacher-only for write operations, allows public read.
     */
    match /homeworks/{homeworkId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      // TODO: Add teacher role validation. Current isSignedIN() allows everyone to write
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages student rankings, allowing teachers to create, update, and delete rankings.
     * @path /rankings/{rankingId}
     * @allow (create) Teacher creates a new ranking.
     * @deny (create) Non-teacher attempts to create a ranking.
     * @allow (get, list) Anyone can read all rankings.
     * @allow (update, delete) Teacher updates or deletes a ranking.
     * @deny (update, delete) Non-teacher attempts to update or delete a ranking.
     * @principle Enforces teacher-only for write operations, allows public read.
     */
    match /rankings/{rankingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      // TODO: Add teacher role validation. Current isSignedIN() allows everyone to write
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages calendar events, allowing teachers to create, update, and delete calendar events.
     * @path /calendar_events/{calendarEventId}
     * @allow (create) Teacher creates a new calendar event.
     * @deny (create) Non-teacher attempts to create a calendar event.
     * @allow (get, list) Anyone can read all calendar events.
     * @allow (update, delete) Teacher updates or deletes a calendar event.
     * @deny (update, delete) Non-teacher attempts to update or delete a calendar event.
     * @principle Enforces teacher-only for write operations, allows public read.
     */
    match /calendar_events/{calendarEventId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      // TODO: Add teacher role validation. Current isSignedIN() allows everyone to write
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
    
    /**
     * @description Allows only admin users to create a role assignment.
     * @path /roles_admin/{userId}
     * @allow (create) Signed-in user creates their profile with matching UID.
     * @deny (create) Signed-in user attempts to create a profile for another user.
     * @allow (get, list, update, delete) Signed-in user reads, updates, or deletes their own profile.
     * @deny (get, list, update, delete) Signed-in user attempts to read, update, or delete another user's profile.
     */
    match /roles_admin/{userId} {
        function isAdmin() {
            return true;
        }

        allow get: if isAdmin();
        allow list: if isAdmin();

        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }    
  }
}