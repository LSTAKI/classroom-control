rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data, allowing only the authenticated user to access their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User 'SJqRDil78qQjL1bS5Z5FSvOzNAr1' can access /users/SJqRDil78qQjL1bS5Z5FSvOzNAr1
     * @deny (get, create, update, delete) User 'SJqRDil78qQjL1bS5Z5FSvOzNAr1' cannot access /users/otherUserId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures class data, allowing teachers to create, update, and delete classes they own,
     *              and allowing students enrolled in the class to read class data.
     * @path /classes/{classId}
     * @allow (create, update, delete) Teacher can create, update, and delete their own classes.
     * @allow (get, list) Students enrolled in the class can read class data.
     * @deny (create, update, delete) Students cannot create, update, or delete classes.
     * @principle Enforces teacher ownership for writes and shared access for enrolled students.
     */
    match /classes/{classId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn(); // Any signed-in user can create a class.
      allow update: if isSignedIn() && get(/databases/$(database)/documents/classes/$(classId)).data.teacherId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/classes/$(classId)).data.teacherId == request.auth.uid;
    }

    /**
     * @description Secures student data, allowing teachers to read student data.
     * @path /students/{studentId}
     * @allow (get, list) Teachers can read student data.
     * @deny (create, update, delete) Only database admin can update student data
     * @principle Restricts write access to admins only, allows read access to signed-in users
     */
    match /students/{studentId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures complaints data, allowing teachers to create complaints.
     *              Accessible to teacher, student and admin.
     * @path /complaints/{complaintId}
     * @allow (create) Teachers can create complaints.
     * @allow (get, list) Anyone can read complaints.
     * @deny (update, delete) Only database admin can update or delete complaints.
     * @principle Restricts write access to admins only, allows read access to signed-in users
     */
    match /complaints/{complaintId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures homework assignments, allowing teachers to create and modify assignments,
     *              and allowing assigned students to access them.
     * @path /homeworks/{homeworkId}
     * @allow (create, update, delete) Teachers can create, update, and delete their own homework assignments.
     * @allow (get, list) Assigned students can read their homework assignments.
     * @deny (create, update, delete) Students cannot create, update, or delete homework assignments.
     * @principle Enforces teacher ownership for writes and shared access for assigned students.
     */
    match /homeworks/{homeworkId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && get(/databases/$(database)/documents/homeworks/$(homeworkId)).data.assignedBy == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/homeworks/$(homeworkId)).data.assignedBy == request.auth.uid;
    }

    /**
     * @description Secures student rankings data.
     * @path /rankings/{rankingId}
     * @allow (get, list) Rankings data is publicly accessible.
     * @deny (create, update, delete) Only database admin can update rankings data
     * @principle Restricts write access to admins only, allows read access to all.
     */
    match /rankings/{rankingId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures calendar event data. ClassId is included for filtering events by class.
     * @path /calendar_events/{calendarEventId}
     * @allow (get, list) Calendar events are publicly accessible.
     * @deny (create, update, delete) Only database admin can update calendar events
     * @principle Restricts write access to admins only, allows read access to all.
     */
    match /calendar_events/{calendarEventId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && get(/databases/$(database)/documents/calendar_events/$(calendarEventId)).data.classId != null;
      allow delete: if false;
    }

    /**
     * @description Secures admin role data, allowing only admins to create or modify admin roles.
     * @path /roles_admin/{userId}
     * @allow (create, delete) Only admin can assign or remove roles.
     * @deny (get, list, update) Not applicable.
     * @principle Admin role assignment is strictly controlled.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Secures submission data of homework assignments, only owner can submit assignments
     * @path /homeworks/{homeworkId}/submissions/{submissionId}
     * @allow (get, list) Homework assignment submitters can list submission data
     * @deny (create, update, delete) Only assigned students can submit homework
     * @principle Submission assignment ownership is strictly controlled.
     */
    match /homeworks/{homeworkId}/submissions/{submissionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }

  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}