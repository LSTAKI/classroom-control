/**
 * @fileOverview Firestore Security Rules for the Teacher Dashboard application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data (e.g., UserProfile, Homework).
 * Certain data (e.g., Classes, Complaints, Rankings, CalendarEvents) can be created and read by multiple users,
 * but modification/deletion is restricted to authorized users (e.g., teachers for Classes).
 * Global admin privileges are granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, where {userId} is the Firebase Auth UID.
 * - /users/{userId}/homework/{homeworkId}: Stores homework assignments for specific users.
 * - /classes/{classId}: Stores class information, accessible to teachers and students in the class.
 * - /students/{studentId}: Stores student data.
 * - /complaints/{complaintId}: Stores complaints.
 * - /rankings/{rankingId}: Stores student rankings.
 * - /calendar/{calendarEventId}: Stores calendar events.
 * - /roles_admin/{userId}: Presence of a document grants admin privileges.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed.
 * - Data validation is relaxed to allow for rapid prototyping, but ownership and relational integrity are strictly enforced.
 * - The existence of a document in `/roles_admin/{userId}` grants admin privileges.
 *
 * Denormalization for Authorization:
 * - Class documents store the `teacherId` to enable direct authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @param {string} userId The user ID to check against.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
        
    /**
     * @description Checks if the user has admin privileges.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }    

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their profile with id 'user123'.
     * @allow (get) User with UID 'user123' reads their own profile.
     * @deny (update) User with UID 'user456' tries to update user 'user123' profile.
     * @principle Enforces document ownership for writes; allows owner-only reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/homework/{homeworkId} collection.
     * @path /users/{userId}/homework/{homeworkId}
     * @allow (create) User with UID 'student123' creates a homework with assignedTo 'student123'.
     * @allow (get) User with UID 'student123' reads their homework.
     * @deny (update) User with UID 'teacher456' tries to update a homework for student 'student123'.
     * @principle Enforces document ownership for writes; allows owner-only reads.
     */
    match /users/{userId}/homework/{homeworkId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.assignedTo == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.assignedTo == resource.data.assignedTo;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /classes/{classId} collection.
     * @path /classes/{classId}
     * @allow (create) Teacher with UID 'teacher123' creates a class with teacherId 'teacher123'.
     * @allow (get) Any signed-in user reads class 'class123'.
     * @deny (update) Student with UID 'student456' tries to update class 'class123'.
     * @principle Allows public reads; enforces teacher ownership for writes.
     */
    match /classes/{classId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.teacherId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.teacherId == request.auth.uid;
    }

    /**
     * @description Rules for the /students/{studentId} collection.
     * @path /students/{studentId}
     * @allow (create) Admin with UID 'admin123' creates a student profile.
     * @allow (get) Teacher with UID 'teacher123' reads student 'student456' profile.
     * @deny (update) Student with UID 'student456' tries to update their own profile directly.
     * @principle Restricts read/write access to admins and teachers.
     */
    match /students/{studentId} {
      allow get: if isSignedIn();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /complaints/{complaintId} collection.
     * @path /complaints/{complaintId}
     * @allow (create) Teacher creates a complaint about a student.
     * @allow (get) Teacher or admin reads a complaint. Student involved can read the complaint.
     * @deny (update) Student tries to update a complaint.
     * @principle Restricts write access to teachers and admins; allows read access to involved parties.
     */
    match /complaints/{complaintId} {
      allow get: if isSignedIn(); // Any authenticated user can read
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /rankings/{rankingId} collection.
     * @path /rankings/{rankingId}
     * @allow (create) Admin creates a ranking.
     * @allow (get) Teacher or admin reads ranking.
     * @deny (update) Teacher tries to update a ranking.
     * @principle Restricts read/write access to admins and teachers.
     */
    match /rankings/{rankingId} {
      allow get: if isSignedIn();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /calendar/{calendarEventId} collection.
     * @path /calendar/{calendarEventId}
     * @allow (create) Teacher creates a calendar event for a class.
     * @allow (get) Any signed-in user can read the event.
     * @deny (update) Student tries to update a calendar event.
     * @principle Allows public reads; restricts write access to teachers and admins.
     */
    match /calendar/{calendarEventId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

     /**
      * @description Rules for the /roles_admin/{userId} collection.
      * @path /roles_admin/{userId}
      * @allow (create) Any user can create their admin role (for testing).
      * @allow (get) Any signed-in user can check for admin role.
      * @deny (update) No one can update directly.
      * @principle Existence of document confers role.
      */
    match /roles_admin/{userId} {
       allow get: if isSignedIn();
       allow list: if false;
       allow create: if isOwner(userId);
       allow update: if false;
       allow delete: if isOwner(userId);
    }
  }
}