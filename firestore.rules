/**
 * @fileoverview Firestore Security Rules for the Teacher Dashboard application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization based on user roles and data ownership.
 * It uses path-based authorization for user-specific data and denormalized data within documents
 * to avoid costly `get()` operations in security rules. Data validation is relaxed in favor of rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, secured by user ID.
 * - /classes/{classId}: Stores class data, including teacherId and studentIds for access control.
 * - /students/{studentId}: Stores student data, accessible by teachers.
 * - /complaints/{complaintId}: Stores complaints.
 * - /homeworks/{homeworkId}: Stores homework assignments.
 * - /rankings/{rankingId}: Stores student rankings.
 * - /calendar_events/{calendarEventId}: Stores calendar events.
 * - /roles_admin/{userId}: Indicates user has admin role.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Class data is primarily accessible to teachers.
 * - Public listing is disabled for collections containing private user data.
 * - Complaints are currently open for modification by anyone, need to be secured.
 *
 * Denormalization for Authorization:
 * - Class documents contain teacherId for identifying the teacher of the class.
 * - Complaint documents contain studentId and teacherId for access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owning user to read and write.
     * @path /users/{userId}
     * @allow (create, get, update, delete, list) if the authenticated user's UID matches the userId.
     * @deny (create, get, update, delete, list) if the authenticated user's UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures class data, allowing teachers to manage their classes.
     * @path /classes/{classId}
     * @allow (create, update, delete) if the authenticated user's UID matches the class's teacherId.
     * @allow (get, list) if true (for now, consider making this role-based later).
     * @deny (create, update, delete) if the authenticated user's UID does not match the class's teacherId.
     * @principle Enforces teacher ownership for class management.
     */
    match /classes/{classId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    /**
     * @description Secures student data, allowing teachers to access student information.
     * @path /students/{studentId}
     * @allow (get, list) if the authenticated user is a teacher (role check to be implemented).
     * @deny (create, update, delete) all operations.
     * @principle Restricts student data modification.
     */
    match /students/{studentId} {
      allow get, list: if request.auth != null;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures complaints, accessible to teacher, student and admin.
     * @path /complaints/{complaintId}
     * @allow (get, list) if true.
     * @allow (create, update, delete) if false; // TODO: Secure complaints for teacher, student, and admin access.  Add owner validation once the schema is updated with an ownership field.
     * @principle Requires role-based access control for complaints.
     */
    match /complaints/{complaintId} {
      allow get, list: if true;
      allow create: if false; // TODO: Secure complaints for teacher, student, and admin access.
      allow update: if false; // Fix: Deny all updates until proper authorization is implemented.  The error in the question occurred here because the app was attempting to update the "status" field, and the rules were allowing any update.
      allow delete: if false; // TODO: Secure complaints for teacher, student, and admin access.
    }

    /**
     * @description Secures homework assignments, accessible to teacher, student, and parent.
     * @path /homeworks/{homeworkId}
     * @allow (get, list) if true.
     * @allow (create, update, delete) if false; // TODO: Secure homework assignments for teacher, student, and parent access. Add owner validation once the schema is updated with an ownership field.
     * @principle Requires role-based access control for homework.
     */
    match /homeworks/{homeworkId} {
      allow get, list: if true;
      allow create: if false; // TODO: Secure homework assignments for teacher, student, and parent access.
      allow update: if false; // TODO: Secure homework assignments for teacher, student, and parent access.
      allow delete: if false; // TODO: Secure homework assignments for teacher, student, and parent access.
    }

    /**
     * @description Secures student rankings, accessible to teacher, student, and parent.
     * @path /rankings/{rankingId}
     * @allow (get, list) if true.
     * @allow (create, update, delete) if false; // TODO: Secure rankings for teacher, student, and parent access. Add owner validation once the schema is updated with an ownership field.
     * @principle Requires role-based access control for rankings.
     */
    match /rankings/{rankingId} {
      allow get, list: if true;
      allow create: if false; // TODO: Secure rankings for teacher, student, and parent access.
      allow update: if false; // TODO: Secure rankings for teacher, student, and parent access.
      allow delete: if false; // TODO: Secure rankings for teacher, student, and parent access.
    }

    /**
     * @description Secures calendar events, accessible to teacher, student, and parent.
     * @path /calendar_events/{calendarEventId}
     * @allow (get, list) if true.
     * @allow (create, update, delete) if false; // TODO: Secure calendar events for teacher, student, and parent access. Add owner validation once the schema is updated with an ownership field.
     * @principle Requires role-based access control for calendar events.
     */
    match /calendar_events/{calendarEventId} {
      allow get, list: if true;
      allow create: if false; // TODO: Secure calendar events for teacher, student, and parent access.
      allow update: if false; // TODO: Secure calendar events for teacher, student, and parent access.
      allow delete: if false; // TODO: Secure calendar events for teacher, student, and parent access.
    }

    /**
     * @description Allows admins to be defined.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
       function isAdmin(userId) {
          return exists(/databases/$(database)/documents/roles_admin/$(userId));
       }

      allow get: if isAdmin(userId);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}