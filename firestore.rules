/**
 * @file Firebase Security Rules for the Teacher Dashboard application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for private user data and a role-based model for administrative access.
 * It uses denormalization to avoid costly `get()` calls and ensures that only authorized users can access specific data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; accessible only to the owner and admins.
 * - /users/{userId}/homework/{homeworkId}: Stores homework assignments for a user; accessible only to the assigned user.
 * - /classes/{classId}: Stores class data; accessible to the teacher and students in the class.
 * - /students/{studentId}: Stores student data; accessible to teachers and admins.
 * - /complaints/{complaintId}: Stores complaints; accessible to teachers, related students, and admins.
 * - /rankings/{rankingId}: Stores student rankings; accessible to teachers and admins.
 * - /calendar/{calendarEventId}: Stores calendar events; accessible to teachers, students, and parents associated with the class.
 * - /roles_admin/{userId}: Grants admin privileges; presence of a document grants the role.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Teachers can access class, student, complaint, ranking, and calendar event data.
 * - Admins have full access to all data.
 * - Public listing of homework is disallowed.
 *
 * Denormalization for Authorization:
 * The `teacherId` field is denormalized in the `/classes/{classId}` document to allow direct authorization checks without needing to traverse parent documents.
 *
 * Structural Segregation:
 * User profiles are stored separately from student data, homework, and complaints to simplify security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user profile data only to the owner of the profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner (userId == request.auth.uid).
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows access to homework assignments only to the assigned user.
     * @path /users/{userId}/homework/{homeworkId}
     * @allow (get, create, update, delete) if the user is the owner (userId == request.auth.uid).
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for homework assignments.
     */
    match /users/{userId}/homework/{homeworkId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows access to class information to the teacher and students in the class.
     * @path /classes/{classId}
     * @allow (get, list) if true.
     * @allow (create) if request.auth.uid == request.resource.data.teacherId
     * @allow (update, delete) if resource.data.teacherId == request.auth.uid.
     * @deny (create, update, delete) if the user is not the teacher.
     * @principle Enforces teacher ownership for class management.
     */
    match /classes/{classId} {
        allow get, list: if true;
        allow create: if request.auth.uid == request.resource.data.teacherId;
        allow update: if resource.data.teacherId == request.auth.uid && resource != null;
        allow delete: if resource.data.teacherId == request.auth.uid && resource != null;
    }

    /**
     * @description Allows access to student performance data to teachers and admins.
     * @path /students/{studentId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add teacher/admin role validation once roles are fully implemented
     * @principle Restricts access to student data to authorized personnel.
     */
    match /students/{studentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add teacher/admin role validation once roles are fully implemented
    }

    /**
     * @description Allows access to complaints to teachers, students (related to the complaint), and admins.
     * @path /complaints/{complaintId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add teacher/student/admin role validation once roles are fully implemented
     * @principle Restricts access to complaints to authorized personnel and related parties.
     */
    match /complaints/{complaintId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add teacher/student/admin role validation once roles are fully implemented
    }

    /**
     * @description Allows access to student rankings to teachers and admins.
     * @path /rankings/{rankingId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add teacher/admin role validation once roles are fully implemented
     * @principle Restricts access to student rankings to authorized personnel.
     */
    match /rankings/{rankingId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add teacher/admin role validation once roles are fully implemented
    }

    /**
     * @description Allows access to calendar events to teachers, students, and parents associated with the class.
     * @path /calendar/{calendarEventId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add teacher/student/parent role validation once roles are fully implemented
     * @principle Restricts access to calendar events to authorized personnel and related parties.
     */
    match /calendar/{calendarEventId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add teacher/student/parent role validation once roles are fully implemented
    }

    /**
     * @description Grants admin privileges to a user if a document exists for their UID in this collection.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
      match /homeworks/{document} {
      allow list: if false;
      allow read: if false;
      allow write: if false;
    }
  }
}