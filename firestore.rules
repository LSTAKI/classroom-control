/**
 * @fileOverview Firestore Security Rules for the Teacher Dashboard application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles (teacher, student, admin) and resource ownership.
 * It enforces strict authorization, preventing unauthorized data modification or access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the owning user.
 * - /classes/{classId}: Stores class data. Teachers can create, update, and delete classes they own. Students can access the class data they are members of.
 * - /students/{studentId}: Stores student data. Teachers can access and manage student data.
 * - /complaints/{complaintId}: Stores complaints. Access is controlled based on teacher, student, and admin roles.
 * - /homeworks/{homeworkId}: Stores homework assignments. Teachers can create, update, and delete homework. Students can access their assigned homework.
 * - /rankings/{rankingId}: Stores student rankings. Access is controlled based on teacher, student and admin roles.
 * - /calendar_events/{calendarEventId}: Stores calendar events. Teachers can create, update and delete events for their classes. Students can access calendar events for their classes.
 * - /roles_admin/{userId}: Indicates if a user has admin rights. Only admins can manage admin roles.
 *
 * Key Security Decisions:
 * - Users can only create/update/delete their own user profiles.
 * - Teachers can create, update, and delete classes, homework, and calendar events associated with their classes.
 * - Students can only access class data, homework, and calendar events they are associated with.
 * - Admin roles are managed through a dedicated collection (`/roles_admin/{userId}`).
 * - Data validation is minimized for rapid prototyping. Focus is on authorization.
 *
 * Denormalization for Authorization:
 * - Class documents store `teacherId` to easily determine ownership for write operations.
 * - Complaint documents store both `studentId` and `teacherId` to simplify access control based on roles.
 * - Homework documents store references to the assigned teacher (`assignedBy`) and student (`assignedTo`).
 *
 * Structural Segregation:
 * - User profiles and class data are stored in separate collections with distinct security requirements.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile data.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get, update, delete) Authenticated user can access and modify their own profile.
     * @deny (create) Authenticated user cannot create a profile for another user.
     * @deny (get, update, delete) Authenticated user cannot access or modify another user's profile.
     * @principle Enforces user ownership of profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to class data.
     * @path /classes/{classId}
     * @allow (create) Authenticated user (teacher) can create a class.
     * @allow (get, list) Any authenticated user can read the class data.
     * @allow (update, delete) Only the teacher who created the class can update or delete it.
     * @deny (create) Unauthenticated user cannot create a class.
     * @deny (update, delete) A non-teacher cannot update or delete a class.
     * @principle Enforces teacher ownership for class management.
     */
    match /classes/{classId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTeacher(teacherId) {
        return request.auth.uid == teacherId;
      }

      function isExistingTeacher(teacherId) {
        return isTeacher(teacherId) && resource != null;
      }

      allow create: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
      allow get, list: if isSignedIn();
      allow update: if isExistingTeacher(resource.data.teacherId);
      allow delete: if isExistingTeacher(resource.data.teacherId);
    }

    /**
     * @description Manages access to student data.
     * @path /students/{studentId}
     * @allow (get, list) Authenticated users can read student data.
     * @allow (create, update, delete) Not allowed for now.
     * @principle Restricts modification of student data.
     */
    match /students/{studentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to complaint data.
     * @path /complaints/{complaintId}
     * @allow (create) Authenticated users can create complaints.
     * @allow (get, list) Authenticated users can read complaints.
     * @allow (update, delete) Not allowed for now.
     */
    match /complaints/{complaintId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Manages access to homework data.
     * @path /homeworks/{homeworkId}
     * @allow (create) Authenticated teachers can create homework assignments.
     * @allow (get, list) Any authenticated user can read homework assignments.
     * @allow (update, delete) Only the teacher who created the homework can update or delete it.
     * @principle Enforces teacher ownership for homework management.
     */
    match /homeworks/{homeworkId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isTeacher(teacherId) {
          return request.auth.uid == teacherId;
      }

      function isExistingTeacher(teacherId) {
          return isTeacher(teacherId) && resource != null;
      }
      allow create: if isSignedIn() && request.resource.data.assignedBy == request.auth.uid;
      allow get, list: if isSignedIn();
      allow update: if isExistingTeacher(resource.data.assignedBy);
      allow delete: if isExistingTeacher(resource.data.assignedBy);

        /**
         * @description Manages access to homework submissions data.
         * @path /homeworks/{homeworkId}/submissions/{submissionId}
         * @allow (get, list) Any authenticated user can read homework submissions.
         * @allow (create, update, delete) Not allowed for now.
         */
        match /submissions/{submissionId} {
          function isSignedIn() {
            return request.auth != null;
          }
          allow get, list: if isSignedIn();
          allow create, update, delete: if false;
        }
    }

    /**
     * @description Manages access to ranking data.
     * @path /rankings/{rankingId}
     * @allow (get, list) Authenticated users can read ranking data.
     * @allow (create, update, delete) Not allowed for now.
     */
    match /rankings/{rankingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access to calendar event data.
     * @path /calendar_events/{calendarEventId}
     * @allow (create) Authenticated users can create calendar event data.
     * @allow (get, list) Authenticated users can read calendar event data.
     * @allow (update, delete) Not allowed for now.
     */
    match /calendar_events/{calendarEventId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow create: if isSignedIn();
      allow get, list: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Manages access to admin role data.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
      function isAdmin() {
        return get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data.isAdmin == true;
      }
      allow create, get, update, delete: if isAdmin();
      allow list: if false;
    }
  }
}